#if 1
class UrlFileCacheEntry;

struct UrlFileCacheEntryInterface::ReferenceClassHelper { using type = UrlFileCacheEntry; };

/// Intermediate helper class for UrlFileCacheEntryInterface.
template <typename S> class UrlFileCacheEntryInterface::ConstReferenceFunctionsImpl DOXYGEN_SWITCH(: public S,)
{
public:
	ConstReferenceFunctionsImpl() = default;
	using PrivateBaseClass = S;
	using PrivateBaseClass::PrivateBaseClass;
	operator const typename maxon::RefConversionTarget<S, typename S::Handler, maxon::StrongRefHandler, UrlFileCacheEntry, false>::type&() const { return reinterpret_cast<const UrlFileCacheEntry&>(this->GetBaseRef()); }
	operator const typename maxon::RefConversionTarget<S, typename S::Handler, maxon::StrongRefHandler, UrlFileCacheEntry, false>::type&() { return reinterpret_cast<const UrlFileCacheEntry&>(this->GetBaseRef()); }
	inline typename std::conditional<S::HAS_ERROR, maxon::Result<Url>, Url>::type GetSourceUrl() const;
	inline typename std::conditional<S::HAS_ERROR, maxon::Result<Url>, Url>::type GetCacheUrl() const;
};
#ifdef DOXYGEN
template <typename REF> class UrlFileCacheEntryInterface::ConstReferenceFunctionsImplDoxy : public UrlFileCacheEntryInterface::ConstReferenceFunctionsImpl<REF> { };
#endif

/// Intermediate helper class for UrlFileCacheEntryInterface.
template <typename S> class UrlFileCacheEntryInterface::ReferenceFunctionsImpl : public ConstReferenceFunctionsImpl<S>
{
public:
	ReferenceFunctionsImpl() = default;
	using PrivateBaseClass = ConstReferenceFunctionsImpl<S>;
	using PrivateBaseClass::PrivateBaseClass;
};
#ifdef DOXYGEN
template <typename REF> class UrlFileCacheEntryInterface::ReferenceFunctionsImplDoxy : public UrlFileCacheEntryInterface::ReferenceFunctionsImpl<REF> { };
#endif

/// Intermediate helper class for UrlFileCacheEntryInterface.
template <typename S> class UrlFileCacheEntryInterface::COWReferenceFunctionsImpl : public ConstReferenceFunctionsImpl<S>
{
public:
	COWReferenceFunctionsImpl() = default;
	using PrivateBaseClass = ConstReferenceFunctionsImpl<S>;
	using PrivateBaseClass::PrivateBaseClass;
};
#ifdef DOXYGEN
template <typename REF> class UrlFileCacheEntryInterface::COWReferenceFunctionsImplDoxy : public UrlFileCacheEntryInterface::COWReferenceFunctionsImpl<REF> { };
#endif

template <typename ST> struct UrlFileCacheEntryInterface::ReferenceFunctions { using type = typename std::conditional<maxon::Bool(ST::type::Handler::KIND & (maxon::VALUEKIND::COW_MASK | maxon::VALUEKIND::DEEP_CONSTNESS)), COWReferenceFunctionsImpl<typename ST::type>, typename std::conditional<std::is_const<typename ST::type::PrivateReferencedType>::value, ConstReferenceFunctionsImpl<typename ST::type>, ReferenceFunctionsImpl<typename ST::type>>::type>::type; };
class UrlFileCacheEntryInterface::Reference :
#ifdef DOXYGEN
public ConstReferenceFunctionsImplDoxy<UrlFileCacheEntry>
#else
public maxon::ReferenceBase<ReferenceFunctions<maxon::RefBaseFunctions<maxon::DirectRef<const UrlFileCacheEntryInterface, maxon::StrongRefHandler, UrlFileCacheEntry>>>>
#endif
{
public:
	MAXON_DEFAULT_REFERENCE_CONSTRUCTORS(Reference, maxon::ReferenceBase<ReferenceFunctions<maxon::RefBaseFunctions<maxon::DirectRef<const UrlFileCacheEntryInterface, maxon::StrongRefHandler, UrlFileCacheEntry>>>>);
	using NonConst = NonConstRef;
};

class UrlFileCacheEntryInterface::NonConstRef :
#ifdef DOXYGEN
public ReferenceFunctionsImplDoxy<NonConstRef>
#else
public maxon::ReferenceBase<ReferenceFunctions<maxon::RefBaseFunctions<maxon::DirectRef<UrlFileCacheEntryInterface, maxon::StrongRefHandler, NonConstRef>>>>
#endif
{
public:
	MAXON_DEFAULT_REFERENCE_CONSTRUCTORS(NonConstRef, maxon::ReferenceBase<ReferenceFunctions<maxon::RefBaseFunctions<maxon::DirectRef<UrlFileCacheEntryInterface, maxon::StrongRefHandler, NonConstRef>>>>);
};

/// UrlFileCacheEntry is the reference class of UrlFileCacheEntryInterface.
///
/// A cache entry generated by UrlFileCacheInterface::FindOrCreateUrl()
/// As long as you keep this reference the cache file will be stored in the temp folder.
/// As soon as the last reference the file will be kept for the maxCacheTime.
class UrlFileCacheEntry : public UrlFileCacheEntryInterface::Reference
{
public:
	MAXON_DEFAULT_REFERENCE_CONSTRUCTORS(UrlFileCacheEntry, Reference);
};

#endif
