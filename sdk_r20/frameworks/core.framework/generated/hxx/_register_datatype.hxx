#if 1
namespace maxon
{
#ifdef MAXON_COMPILER_MSVC
#else
#endif
	MAXON_REGISTRY_REGISTER(DataTypes);
#if !defined(MAXON_API) || defined(DOXYGEN)
#ifdef MAXON_COMPILER_INTEL
#else
#endif
#endif
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Char,, "char");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_UChar,, "uchar");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Int16,, "int16");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_UInt16,, "uint16");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Int32,, "int32");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_UInt32,, "uint32");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Int64,, "int64");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_UInt64,, "uint64");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Utf16Char,, "utf16char");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Utf32Char,, "utf32char");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Float32,, "float32");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Float64,, "float64");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Bool,, "bool");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Byte,, "byte");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Id,, "net.maxon.datatype.id");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_InternedId,, "net.maxon.datatype.internedid");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Data,, "net.maxon.datatype.data");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_UnitType,, "net.maxon.datatype.unittype");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_SourceLocation,, "net.maxon.datatype.sourcelocation");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_DelegateBase,, "net.maxon.datatype.delegatebase");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_AInt,, "int");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_AUInt,, "uint");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_AFloat,, "float");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_ConstDataPtr,, "net.maxon.datatype.constdataptr");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_DataPtr,, "net.maxon.datatype.dataptr");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_MoveDataPtr,, "net.maxon.datatype.movedataptr");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_ForwardingDataPtr,, "net.maxon.datatype.forwardingdataptr");
	PRIVATE_MAXON_DECLARATION_REGISTER_DECLARATION(DT_Member,, "net.maxon.datatype.member");
	namespace enum936 { enum class INNERMOST_MEMBER : Int32
	{
	} ; }
	maxon::String PrivateToString_INNERMOST_MEMBER936(std::underlying_type<enum936::INNERMOST_MEMBER>::type x, const maxon::FormatStatement* fmt)
	{
		const maxon::UInt64* values = nullptr;
		return maxon::StringInterface::PrivateEnumToString((maxon::UInt64) x, "INNERMOST_MEMBER", SIZEOF(x), false, values, "", fmt);
	}
}
#endif
