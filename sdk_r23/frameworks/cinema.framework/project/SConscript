'''
automatically generated build script
Do not modify, instead edit project/projectdefinition.txt
'''



# SCons build script for the cinema.framework binary


Import('globalenv')
def create_objs(SRCS, path=""):
    return [globalenv.Object(path + src) for src in SRCS]


globalenv.Replace(MAXON_PROJECT_DIR=globalenv['MAXON_ROOTDIR']+'/frameworks/cinema.framework')
globalenv.Replace(MAXON_PROJECT_SOURCE=globalenv['MAXON_PROJECT_DIR']+'/source')
globalenv.Replace(MAXON_MESH_MISC_FRAMEWORK_ROOT_PATH=globalenv['MAXON_FRAMEWORKS_PATH']+'/mesh_misc.framework')
globalenv.Replace(MAXON_CORE_FRAMEWORK_ROOT_PATH=globalenv['MAXON_FRAMEWORKS_PATH']+'/core.framework')
globalenv.Replace(MAXON_GEOM_FRAMEWORK_ROOT_PATH=globalenv['MAXON_FRAMEWORKS_PATH']+'/geom.framework')

cpp_files = [
    'generated/hxx/register.cpp',
    'source/c4d_basebitmap.cpp',
    'source/c4d_basechannel.cpp',
    'source/c4d_basecontainer.cpp',
    'source/c4d_basedocument.cpp',
    'source/c4d_basedraw.cpp',
    'source/c4d_baseeffectorplugin.cpp',
    'source/c4d_baselist.cpp',
    'source/c4d_basematerial.cpp',
    'source/c4d_baseobject.cpp',
    'source/c4d_baseplugin.cpp',
    'source/c4d_baseselect.cpp',
    'source/c4d_basesound.cpp',
    'source/c4d_basetag.cpp',
    'source/c4d_basetime.cpp',
    'source/c4d_bitmapfilter.cpp',
    'source/c4d_canimation.cpp',
    'source/c4d_commandplugin.cpp',
    'source/c4d_ctrackplugin.cpp',
    'source/c4d_customdatatype.cpp',
    'source/c4d_customgui/customgui_base.cpp',
    'source/c4d_customgui/customgui_bitmapbutton.cpp',
    'source/c4d_customgui/customgui_datetime.cpp',
    'source/c4d_customgui/customgui_descproperty.cpp',
    'source/c4d_customgui/customgui_description.cpp',
    'source/c4d_customgui/customgui_field.cpp',
    'source/c4d_customgui/customgui_fontchooser.cpp',
    'source/c4d_customgui/customgui_gradient.cpp',
    'source/c4d_customgui/customgui_htmlviewer.cpp',
    'source/c4d_customgui/customgui_hyperlink.cpp',
    'source/c4d_customgui/customgui_iconchooser.cpp',
    'source/c4d_customgui/customgui_inexclude.cpp',
    'source/c4d_customgui/customgui_itemtree.cpp',
    'source/c4d_customgui/customgui_kerning.cpp',
    'source/c4d_customgui/customgui_linkbox.cpp',
    'source/c4d_customgui/customgui_listview.cpp',
    'source/c4d_customgui/customgui_listview2.cpp',
    'source/c4d_customgui/customgui_matassign.cpp',
    'source/c4d_customgui/customgui_matpreview.cpp',
    'source/c4d_customgui/customgui_movieview.cpp',
    'source/c4d_customgui/customgui_pla.cpp',
    'source/c4d_customgui/customgui_previewimage.cpp',
    'source/c4d_customgui/customgui_priority.cpp',
    'source/c4d_customgui/customgui_quicktab.cpp',
    'source/c4d_customgui/customgui_range.cpp',
    'source/c4d_customgui/customgui_soundeffector.cpp',
    'source/c4d_customgui/customgui_splinecontrol.cpp',
    'source/c4d_customgui/customgui_texbox.cpp',
    'source/c4d_customgui/customgui_texturemanager.cpp',
    'source/c4d_customgui/customgui_unitscale.cpp',
    'source/c4d_customguidata.cpp',
    'source/c4d_customguiplugin.cpp',
    'source/c4d_descriptiondialog.cpp',
    'source/c4d_falloffplugin.cpp',
    'source/c4d_fielddata.cpp',
    'source/c4d_fieldplugin.cpp',
    'source/c4d_file.cpp',
    'source/c4d_filterplugin.cpp',
    'source/c4d_gedata.cpp',
    'source/c4d_general.cpp',
    'source/c4d_gui.cpp',
    'source/c4d_gv/c4d_graphview.cpp',
    'source/c4d_gv/c4d_operatorplugin.cpp',
    'source/c4d_gv/c4d_particles.cpp',
    'source/c4d_help.cpp',
    'source/c4d_library.cpp',
    'source/c4d_libs/lib_activeobjectmanager.cpp',
    'source/c4d_libs/lib_aes.cpp',
    'source/c4d_libs/lib_batchrender.cpp',
    'source/c4d_libs/lib_birender.cpp',
    'source/c4d_libs/lib_browser.cpp',
    'source/c4d_libs/lib_ca.cpp',
    'source/c4d_libs/lib_clipmap.cpp',
    'source/c4d_libs/lib_cloud.cpp',
    'source/c4d_libs/lib_collider.cpp',
    'source/c4d_libs/lib_colorchooser.cpp',
    'source/c4d_libs/lib_customdatatag.cpp',
    'source/c4d_libs/lib_datetimeparser.cpp',
    'source/c4d_libs/lib_description.cpp',
    'source/c4d_libs/lib_dwgobjects.cpp',
    'source/c4d_libs/lib_editortools.cpp',
    'source/c4d_libs/lib_filtertree.cpp',
    'source/c4d_libs/lib_hair.cpp',
    'source/c4d_libs/lib_iconcollection.cpp',
    'source/c4d_libs/lib_instanceobject.cpp',
    'source/c4d_libs/lib_intersect.cpp',
    'source/c4d_libs/lib_layershader.cpp',
    'source/c4d_libs/lib_lodobject.cpp',
    'source/c4d_libs/lib_modeling.cpp',
    'source/c4d_libs/lib_motiontracker.cpp',
    'source/c4d_libs/lib_net.cpp',
    'source/c4d_libs/lib_ngon.cpp',
    'source/c4d_libs/lib_noise.cpp',
    'source/c4d_libs/lib_paint.cpp',
    'source/c4d_libs/lib_pictureviewer.cpp',
    'source/c4d_libs/lib_polygonreduction.cpp',
    'source/c4d_libs/lib_prefs.cpp',
    'source/c4d_libs/lib_py.cpp',
    'source/c4d_libs/lib_regexpr.cpp',
    'source/c4d_libs/lib_sculpt.cpp',
    'source/c4d_libs/lib_sculptbrush.cpp',
    'source/c4d_libs/lib_sds.cpp',
    'source/c4d_libs/lib_selectionchanger.cpp',
    'source/c4d_libs/lib_snd.cpp',
    'source/c4d_libs/lib_splinehelp.cpp',
    'source/c4d_libs/lib_substance.cpp',
    'source/c4d_libs/lib_takesystem.cpp',
    'source/c4d_libs/lib_tlmarker.cpp',
    'source/c4d_libs/lib_token.cpp',
    'source/c4d_libs/lib_viewport.cpp',
    'source/c4d_libs/lib_volumebuilder.cpp',
    'source/c4d_libs/lib_volumeobject.cpp',
    'source/c4d_libs/lib_voronoifracture.cpp',
    'source/c4d_libs/lib_zipfile.cpp',
    'source/c4d_listview.cpp',
    'source/c4d_materialplugin.cpp',
    'source/c4d_memory.cpp',
    'source/c4d_messageplugin.cpp',
    'source/c4d_network.cpp',
    'source/c4d_nodeplugin.cpp',
    'source/c4d_objectplugin.cpp',
    'source/c4d_painter.cpp',
    'source/c4d_particleobject.cpp',
    'source/c4d_pmain.cpp',
    'source/c4d_quaternion.cpp',
    'source/c4d_reflection.cpp',
    'source/c4d_resource.cpp',
    'source/c4d_scenehookplugin.cpp',
    'source/c4d_shaderplugin.cpp',
    'source/c4d_snapplugin.cpp',
    'source/c4d_spc.cpp',
    'source/c4d_string.cpp',
    'source/c4d_tagplugin.cpp',
    'source/c4d_thread.cpp',
    'source/c4d_toolplugin.cpp',
    'source/c4d_tools.cpp',
    'source/c4d_videopost.cpp',
    'source/c4d_videopostplugin.cpp',
    'source/ge_ieee.cpp',
    'source/operatingsystem.cpp'
]
includedirs = [
    globalenv['MAXON_PROJECT_DIR']+'/source',
    globalenv['MAXON_PROJECT_DIR']+'/source/c4d_customgui',
    globalenv['MAXON_PROJECT_DIR']+'/source/c4d_gv',
    globalenv['MAXON_PROJECT_DIR']+'/source/c4d_libs',
    globalenv['MAXON_PROJECT_DIR']+'/source/c4d_misc',
    globalenv['MAXON_PROJECT_DIR']+'/source/c4d_misc/utilities',
    globalenv['MAXON_PROJECT_DIR']+'/source/description',
    globalenv['MAXON_PROJECT_DIR']+'/generated/hxx',
    globalenv['MAXON_MESH_MISC_FRAMEWORK_ROOT_PATH']+'/source',
    globalenv['MAXON_MESH_MISC_FRAMEWORK_ROOT_PATH']+'/generated/hxx',
    globalenv['MAXON_CORE_FRAMEWORK_ROOT_PATH']+'/source',
    globalenv['MAXON_CORE_FRAMEWORK_ROOT_PATH']+'/source/maxon/math',
    globalenv['MAXON_CORE_FRAMEWORK_ROOT_PATH']+'/source/maxon/utilities',
    globalenv['MAXON_CORE_FRAMEWORK_ROOT_PATH']+'/generated/hxx',
    globalenv['MAXON_GEOM_FRAMEWORK_ROOT_PATH']+'/source',
    globalenv['MAXON_GEOM_FRAMEWORK_ROOT_PATH']+'/generated/hxx'
]
if globalenv['MAXON_BUILD_ARCH'] == 'rpi1' or globalenv['MAXON_BUILD_ARCH'] == 'rpi2':
    includedirs.append('/usr/local/rpi/rpifs/usr/include')

debug64 = globalenv.Clone()
if globalenv['MAXON_COMPILER_LINUX'] == 'gcc' or globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    debug64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-DUSE_API_MAXON',
        '-DMAXON_MODULE_ID=\'"net.maxon.c4d.cinema.framework"\'',
        '-fPIC',
        '-c',
        '-fmessage-length=0',
        '-g',
        '-fvisibility=hidden',
        '-Wall',
        '-Wno-multichar',
        '-Wno-switch',
        '-Wno-strict-aliasing',
        '-Werror=char-subscripts',
        '-Werror=sequence-point',
        '-mssse3',
        '-std=gnu++17',
        '-Wno-invalid-offsetof',
        '-Werror=conversion-null',
        '-Werror=reorder',
        '@'+globalenv['MAXON_SETTINGS_PATH']+'/linux_'+globalenv['MAXON_COMPILER_LINUX']+'_x86_debug.props'
    ])
if globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    debug64.Append(CXXFLAGS=['-stdlib=libc++'])

if globalenv['MAXON_COMPILER_LINUX'] == 'intel':
    debug64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-fPIC',
        '-c',
        '-std=c++11',
        '-D_USE_INTEL_COMPILER',
        '-D__C_PLUS_PLUS_0X__',
        '-debug',
        'inline-debug-info',
        '-fp-speculationsafe',
        '-unroll',
        '-sox-',
        '-diag-error:589,2407',
        '-diag-warning:1418,1599',
        '-diag-disable:vec,cpu-dispatch',
        '-diag-disable:1,111,193,280,327,383,424,444,654,869,981,1572,1899,2259,2266,2267,2268,2270,2271,2273,3280,3346,10369,10370,10371,11074,11075,13000',
        '-w3',
        '-finline-functions',
        '-g'
    ])

debug64.Append(LIBS=[
])
debug64.Append(LIBPATH=[
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/mesh_misc.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/core.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/geom.framework'
])
debug64.Append(LINKFLAGS=[
    '-Wl,--whole-archive',
    '-Wl,--no-whole-archive'
])
debug64.Append(SHLINKCOM=' -Wl,--start-group -lmesh_misc.framework_debug64 -lcore.framework_debug64 -lgeom.framework_debug64  -Wl,--end-group')
release64 = globalenv.Clone()
if globalenv['MAXON_COMPILER_LINUX'] == 'gcc' or globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    release64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_RELEASE',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-DUSE_API_MAXON',
        '-DMAXON_MODULE_ID=\'"net.maxon.c4d.cinema.framework"\'',
        '-fPIC',
        '-c',
        '-fmessage-length=0',
        '-g',
        '-O3',
        '-fvisibility=hidden',
        '-Wall',
        '-Wno-multichar',
        '-Wno-switch',
        '-Wno-strict-aliasing',
        '-Werror=char-subscripts',
        '-Werror=sequence-point',
        '-mssse3',
        '-std=gnu++17',
        '-Wno-invalid-offsetof',
        '-Werror=conversion-null',
        '-Werror=reorder',
        '@'+globalenv['MAXON_SETTINGS_PATH']+'/linux_'+globalenv['MAXON_COMPILER_LINUX']+'_x86_release.props'
    ])
if globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    release64.Append(CXXFLAGS=['-stdlib=libc++'])

if globalenv['MAXON_COMPILER_LINUX'] == 'intel':
    release64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-fPIC',
        '-c',
        '-std=c++11',
        '-D_USE_INTEL_COMPILER',
        '-D__C_PLUS_PLUS_0X__',
        '-debug',
        'inline-debug-info',
        '-fp-speculationsafe',
        '-unroll',
        '-sox-',
        '-diag-error:589,2407',
        '-diag-warning:1418,1599',
        '-diag-disable:vec,cpu-dispatch',
        '-diag-disable:1,111,193,280,327,383,424,444,654,869,981,1572,1899,2259,2266,2267,2268,2270,2271,2273,3280,3346,10369,10370,10371,11074,11075,13000',
        '-w3',
        '-finline-functions',
        '-g'
    ])

release64.Append(LIBS=[
])
release64.Append(LIBPATH=[
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/mesh_misc.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/core.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/geom.framework'
])
release64.Append(LINKFLAGS=[
    '-Wl,--whole-archive',
    '-Wl,--no-whole-archive'
])
release64.Append(SHLINKCOM=' -Wl,--start-group -lmesh_misc.framework_release64 -lcore.framework_release64 -lgeom.framework_release64  -Wl,--end-group')
libdebug64 = globalenv.Clone()
if globalenv['MAXON_COMPILER_LINUX'] == 'gcc' or globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    libdebug64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-D__STANDALONEAPP',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-DUSE_API_MAXON',
        '-DMAXON_MODULE_ID=\'"net.maxon.c4d.cinema.framework"\'',
        '-fPIC',
        '-c',
        '-fmessage-length=0',
        '-g',
        '-fvisibility=hidden',
        '-Wall',
        '-Wno-multichar',
        '-Wno-switch',
        '-Wno-strict-aliasing',
        '-Werror=char-subscripts',
        '-Werror=sequence-point',
        '-mssse3',
        '-std=gnu++17',
        '-Wno-invalid-offsetof',
        '-Werror=conversion-null',
        '-Werror=reorder',
        '@'+globalenv['MAXON_SETTINGS_PATH']+'/linux_'+globalenv['MAXON_COMPILER_LINUX']+'_x86_debug.props'
    ])
if globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    libdebug64.Append(CXXFLAGS=['-stdlib=libc++'])

if globalenv['MAXON_COMPILER_LINUX'] == 'intel':
    libdebug64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-fPIC',
        '-c',
        '-std=c++11',
        '-D_USE_INTEL_COMPILER',
        '-D__C_PLUS_PLUS_0X__',
        '-debug',
        'inline-debug-info',
        '-fp-speculationsafe',
        '-unroll',
        '-sox-',
        '-diag-error:589,2407',
        '-diag-warning:1418,1599',
        '-diag-disable:vec,cpu-dispatch',
        '-diag-disable:1,111,193,280,327,383,424,444,654,869,981,1572,1899,2259,2266,2267,2268,2270,2271,2273,3280,3346,10369,10370,10371,11074,11075,13000',
        '-w3',
        '-finline-functions',
        '-g'
    ])

libdebug64.Append(LIBS=[
])
libdebug64.Append(LIBPATH=[
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/mesh_misc.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/core.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/geom.framework'
])
libdebug64.Append(LINKFLAGS=[
    '-Wl,--whole-archive',
    '-Wl,--no-whole-archive'
])
libdebug64.Append(SHLINKCOM=' -Wl,--start-group -lmesh_misc.framework_libdebug64 -lcore.framework_libdebug64 -lgeom.framework_libdebug64  -Wl,--end-group')
librelease64 = globalenv.Clone()
if globalenv['MAXON_COMPILER_LINUX'] == 'gcc' or globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    librelease64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_RELEASE',
        '-D__STANDALONEAPP',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-DUSE_API_MAXON',
        '-DMAXON_MODULE_ID=\'"net.maxon.c4d.cinema.framework"\'',
        '-fPIC',
        '-c',
        '-fmessage-length=0',
        '-g',
        '-O3',
        '-fvisibility=hidden',
        '-Wall',
        '-Wno-multichar',
        '-Wno-switch',
        '-Wno-strict-aliasing',
        '-Werror=char-subscripts',
        '-Werror=sequence-point',
        '-mssse3',
        '-std=gnu++17',
        '-Wno-invalid-offsetof',
        '-Werror=conversion-null',
        '-Werror=reorder',
        '@'+globalenv['MAXON_SETTINGS_PATH']+'/linux_'+globalenv['MAXON_COMPILER_LINUX']+'_x86_debug.props'
    ])
if globalenv['MAXON_COMPILER_LINUX'] == 'clang':
    librelease64.Append(CXXFLAGS=['-stdlib=libc++'])

if globalenv['MAXON_COMPILER_LINUX'] == 'intel':
    librelease64.Append(CXXFLAGS=[
        '-DMAXON_TARGET_DEBUG',
        '-DMAXON_TARGET_64BIT',
        '-DMAXON_TARGET_LINUX',
        '-DMAXON_API',
        '-fPIC',
        '-c',
        '-std=c++11',
        '-D_USE_INTEL_COMPILER',
        '-D__C_PLUS_PLUS_0X__',
        '-debug',
        'inline-debug-info',
        '-fp-speculationsafe',
        '-unroll',
        '-sox-',
        '-diag-error:589,2407',
        '-diag-warning:1418,1599',
        '-diag-disable:vec,cpu-dispatch',
        '-diag-disable:1,111,193,280,327,383,424,444,654,869,981,1572,1899,2259,2266,2267,2268,2270,2271,2273,3280,3346,10369,10370,10371,11074,11075,13000',
        '-w3',
        '-finline-functions',
        '-g'
    ])

librelease64.Append(LIBS=[
])
librelease64.Append(LIBPATH=[
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/mesh_misc.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/core.framework',
    globalenv['MAXON_ROOTDIR']+'/build/frameworks/geom.framework'
])
librelease64.Append(LINKFLAGS=[
    '-Wl,--whole-archive',
    '-Wl,--no-whole-archive'
])
librelease64.Append(SHLINKCOM=' -Wl,--start-group -lmesh_misc.framework_librelease64 -lcore.framework_librelease64 -lgeom.framework_librelease64  -Wl,--end-group')

cmdline = 'python '+globalenv['MAXON_SETTINGS_PATH']+'/sourceprocessor/sourceprocessor.py "'+globalenv['MAXON_PROJECT_DIR']+'"'
Execute(cmdline)


if globalenv['MAXON_BUILD_CONFIG'] == 'debug64':
    globalenv = debug64
    globalenv.Append(CPPPATH=includedirs)
    binary = globalenv.StaticLibrary('cinema.framework_debug64.a', cpp_files)
    Depends(binary, [
        '#build/frameworks/mesh_misc.framework/libmesh_misc.framework_debug64.a',
        '#build/frameworks/core.framework/libcore.framework_debug64.a',
        '#build/frameworks/geom.framework/libgeom.framework_debug64.a'
    ])
    if globalenv['MAXON_LINUX_STRIP_STATIC_LIB'] == True:
        AddPostAction(binary, globalenv.stripDebug)


if globalenv['MAXON_BUILD_CONFIG'] == 'release64':
    globalenv = release64
    globalenv.Append(CPPPATH=includedirs)
    binary = globalenv.StaticLibrary('cinema.framework_release64.a', cpp_files)
    Depends(binary, [
        '#build/frameworks/mesh_misc.framework/libmesh_misc.framework_release64.a',
        '#build/frameworks/core.framework/libcore.framework_release64.a',
        '#build/frameworks/geom.framework/libgeom.framework_release64.a'
    ])
    if globalenv['MAXON_LINUX_STRIP_STATIC_LIB'] == True:
        AddPostAction(binary, globalenv.stripDebug)


if globalenv['MAXON_BUILD_CONFIG'] == 'libdebug64':
    globalenv = libdebug64
    globalenv.Append(CPPPATH=includedirs)
    binary = globalenv.StaticLibrary('cinema.framework_libdebug64.a', cpp_files)
    Depends(binary, [
        '#build/frameworks/mesh_misc.framework/libmesh_misc.framework_libdebug64.a',
        '#build/frameworks/core.framework/libcore.framework_libdebug64.a',
        '#build/frameworks/geom.framework/libgeom.framework_libdebug64.a'
    ])
    if globalenv['MAXON_LINUX_STRIP_STATIC_LIB'] == True:
        AddPostAction(binary, globalenv.stripDebug)


if globalenv['MAXON_BUILD_CONFIG'] == 'librelease64':
    globalenv = librelease64
    globalenv.Append(CPPPATH=includedirs)
    binary = globalenv.StaticLibrary('cinema.framework_librelease64.a', cpp_files)
    Depends(binary, [
        '#build/frameworks/mesh_misc.framework/libmesh_misc.framework_librelease64.a',
        '#build/frameworks/core.framework/libcore.framework_librelease64.a',
        '#build/frameworks/geom.framework/libgeom.framework_librelease64.a'
    ])
    if globalenv['MAXON_LINUX_STRIP_STATIC_LIB'] == True:
        AddPostAction(binary, globalenv.stripDebug)

