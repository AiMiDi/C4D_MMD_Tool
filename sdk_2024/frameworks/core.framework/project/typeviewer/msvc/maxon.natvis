<?xml version="1.0" encoding="utf-8"?>

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<Type Name="maxon::TimerValue">
    <DisplayString>{_value} ms</DisplayString>
</Type>

<Type Name="maxon::AutoMem&lt;*&gt;">
    <DisplayString>{_object}</DisplayString>
</Type>

<Type Name="maxon::Vec2&lt;*&gt;">
    <DisplayString>{{ {x}, {y} }</DisplayString>
    <Expand>
        <Item Name="x">x</Item>
        <Item Name="y">y</Item>
        <Item Name="len (3. approx)">0.5*((x*x+y*y) * (0.125+1/(0.5*(x*x+y*y)+2))+0.5) + (x*x+y*y) / (2*((x*x+y*y) * (0.125+1/(0.5*(x*x+y*y)+2))+0.5))</Item>
		</Expand>
</Type>

<Type Name="maxon::Vec3&lt;*&gt;">
    <DisplayString>{{ {x}, {y}, {z} }</DisplayString>
    <Expand>
        <Item Name="x">x</Item>
        <Item Name="y">y</Item>
        <Item Name="z">z</Item>
        <Item Name="len (3. approx)">0.5*((x*x+y*y+z*z) * (0.125+1/(0.5*(x*x+y*y+z*z)+2))+0.5) + (x*x+y*y+z*z) / (2*((x*x+y*y+z*z) * (0.125+1/(0.5*(x*x+y*y+z*z)+2))+0.5))</Item>
		</Expand>
</Type>

<Type Name="maxon::Vec4&lt;*&gt;">
    <DisplayString>{{ {x}, {y}, {z}, {w} }</DisplayString>
    <Expand>
        <Item Name="x">x</Item>
        <Item Name="y">y</Item>
        <Item Name="z">z</Item>
        <Item Name="w">w</Item>
        <Item Name="len (3. approx)">0.5*((x*x+y*y+z*z+w*w) * (0.125+1/(0.5*(x*x+y*y+z*z+w*w)+2))+0.5) + (x*x+y*y+z*z+w*w) / (2*((x*x+y*y+z*z+w*w) * (0.125+1/(0.5*(x*x+y*y+z*z+w*w)+2))+0.5))</Item>
		</Expand>
</Type>

<Type Name="maxon::Col3&lt;*&gt;">
  <DisplayString>{{ {r}, {g}, {b} }</DisplayString>
  <Expand>
    <Item Name="r">r</Item>
    <Item Name="g">g</Item>
    <Item Name="b">b</Item>
  </Expand>
</Type>

<Type Name="maxon::Col4&lt;*&gt;">
  <DisplayString>{{ {r}, {g}, {b}, {a} }</DisplayString>
  <Expand>
    <Item Name="r">r</Item>
    <Item Name="g">g</Item>
    <Item Name="b">b</Item>
    <Item Name="a">a</Item>
  </Expand>
</Type>

<Type Name="maxon::Tuple&lt;*,*&gt;">
  <DisplayString>{{ {first}, {second} }</DisplayString>
  <Expand>
    <Item Name="first">first</Item>
    <Item Name="second">second</Item>
  </Expand>
</Type>

<Type Name="maxon::Tuple&lt;*,*,*&gt;">
  <DisplayString>{{ {first}, {second}, {third} }</DisplayString>
  <Expand>
    <Item Name="first">first</Item>
    <Item Name="second">second</Item>
    <Item Name="third">third</Item>
  </Expand>
</Type>

<Type Name="maxon::Tuple&lt;*,*,*,*&gt;">
  <DisplayString>{{ {first}, {second}, {third}, {fourth}  }</DisplayString>
  <Expand>
    <Item Name="first">first</Item>
    <Item Name="second">second</Item>
    <Item Name="third">third</Item>
    <Item Name="fourth">fourth</Item>
  </Expand>
</Type>

<Type Name="maxon::Tuple&lt;*,*,*,*,*&gt;">
  <DisplayString>{{ {first}, {second}, {third}, {fourth}, {fifth} }</DisplayString>
  <Expand>
    <Item Name="first">first</Item>
    <Item Name="second">second</Item>
    <Item Name="third">third</Item>
    <Item Name="fourth">fourth</Item>
    <Item Name="fifth">fifth</Item>
  </Expand>
</Type>

<Type Name="maxon::UuidX4hi">
  <!-- Helper structure for maxon::Uuid -->
  <AlternativeType Name="maxon::UuidX4lo" />
  <DisplayString Condition="v==0">0</DisplayString>
  <DisplayString Condition="v==1">1</DisplayString>
  <DisplayString Condition="v==2">2</DisplayString>
  <DisplayString Condition="v==3">3</DisplayString>
  <DisplayString Condition="v==4">4</DisplayString>
  <DisplayString Condition="v==5">5</DisplayString>
  <DisplayString Condition="v==6">6</DisplayString>
  <DisplayString Condition="v==7">7</DisplayString>
  <DisplayString Condition="v==8">8</DisplayString>
  <DisplayString Condition="v==9">9</DisplayString>
  <DisplayString Condition="v==10">A</DisplayString>
  <DisplayString Condition="v==11">B</DisplayString>
  <DisplayString Condition="v==12">C</DisplayString>
  <DisplayString Condition="v==13">D</DisplayString>
  <DisplayString Condition="v==14">E</DisplayString>
  <DisplayString>F</DisplayString>
</Type>
<Type Name="maxon::UuidX8">
  <!-- Helper structure for maxon::Uuid -->
    <DisplayString>{*(maxon::UuidX4hi*)(this)}{*(maxon::UuidX4lo*)(this)}</DisplayString>
</Type>
<Type Name="maxon::UuidX32">
  <!-- Helper structure for maxon::Uuid -->
  <DisplayString>{((maxon::UuidX8*)this)[0]}{((maxon::UuidX8*)this)[1]}{((maxon::UuidX8*)this)[2]}{((maxon::UuidX8*)this)[3]}</DisplayString>
</Type>
<Type Name="maxon::Uuid">
  <!-- Helper structure for maxon::Uuid -->
  <DisplayString Condition="_object == 0">nullptr</DisplayString>
  <DisplayString Condition="_object != 0">UUID: {(*(maxon::UuidX32**)this)}-{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x4)}{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x5)}-{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x6)}{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x7)}-{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x8)}{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0x9)}-{*(maxon::UuidX32*)((*(maxon::UChar**)this)+0xA)}{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0xE)}{*(maxon::UuidX8*)((*(maxon::UChar**)this)+0xF)}</DisplayString>
</Type>

<Type Name="maxon::LanguageRef">
  <DisplayString Condition="_object == 0">nullptr</DisplayString>
  <DisplayString Condition="_object != 0">{{ {*((maxon::Id*)(((char*)_object)+0))} {*((maxon::String*)(((char*)_object)+16))} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
	<StringView>(*((char**)(((char*)_object)+0))), [(*((int*)(((char*)_object)+0+sizeof(char*))))]sb</StringView>
	<Expand>
    <Item Name="Identifier">*((maxon::Id*)(((char*)_object)+0))</Item>
    <Item Name="Language">*((maxon::String*)(((char*)_object)+16))</Item>
    <Item Name="RefCnt">*((long*)(((char*)_object)-8))/16</Item>
	</Expand>
</Type>

<Type Name="maxon::StringInterface">
    <DisplayString Condition="this == 0">nullptr</DisplayString>
    
    <!-- Section for the new string layout in R19 and futurama -->
    <DisplayString Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)+0) &lt; 0">{{ "{(*((char**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))]sb}" RefCnt: {(*((long*)(((char*)this)-8))/16)}x }</DisplayString>
    <DisplayString Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)+0) == 0">{{ "{(*((unsigned short**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))/16]sub}" RefCnt: {(*((long*)(((char*)this)-8))/16)}x }</DisplayString>
    <DisplayString Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)+0) == 1">{{ "[4byte-unicode]{(*((unsigned int**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))/16]su}" RefCnt: {(*((long*)(((char*)this)-8))/16)}x }</DisplayString>
    <DisplayString >Error</DisplayString>
  
    <StringView Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)+0) &lt; 0">(*((char**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))]sb</StringView>
    <StringView Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)+0) == 0">(*((unsigned short**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))/16]sub</StringView>
    <StringView >Error</StringView>

    <Expand>
        <Item Name="Length" Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) &lt; 0">(*((int*)(((char*)this)+24+sizeof(char*))))</Item>
        <Item Name="Length" Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) == 0">(*((int*)(((char*)this)+24+sizeof(char*)))) / 2</Item>
        <Item Name="Length" Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) == 1">(*((int*)(((char*)this)+24+sizeof(char*)))) / 4</Item>
        <Item Name="Width"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) &lt; 0">1</Item>
        <Item Name="Width"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) == 0">2</Item>
        <Item Name="Width"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1 &amp;&amp; *(((char*)this)) == 1">4</Item>
        <Item Name="Pointer"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1&amp;&amp; *(((char*)this)+0) &lt; 0">(*((char**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))]sb</Item>
        <Item Name="Pointer"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1&amp;&amp; *(((char*)this)+0) == 0">(*((unsigned short**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))/16]sub</Item>
        <Item Name="Pointer"  Condition="this != 0 &amp;&amp; *(((short*)this)+1) == -1 &amp;&amp; *(((int*)this)+1) == -1&amp;&amp; *(((char*)this)+0) == 1">(*((unsigned int**)(((char*)this)+24))), [(*((int*)(((char*)this)+24+sizeof(char*))))/16]su</Item>
        <Item Name="RefCnt">*((long*)(((char*)this)-8))/16</Item>
    </Expand>
</Type>

<Type Name="maxon::CStringInterface">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">{{ "{(*((char**)(((char*)this)+0))), [(*((int*)(((char*)this)+0+sizeof(char*))))]sb}" RefCnt: {(*((long*)(((char*)this)-8))/16)}x }</DisplayString>
	<StringView>(*((char**)(((char*)this)+0))), [(*((int*)(((char*)this)+0+sizeof(char*))))]sb</StringView>
	<Expand>
      <Item Name="String">(*((char**)(((char*)this)+0))), [(*((int*)(((char*)this)+0+sizeof(char*))))]sb</Item>
			<Item Name="Length">(*((int*)(((char*)this)+0+sizeof(char*)))) > 0 ? (*((int*)(((char*)this)+0+sizeof(char*)))) - 1 : 0</Item>
      <Item Name="RefCnt">*((long*)(((char*)this)-8))/16</Item>
	</Expand>
</Type>

<!-- Redirect to CStringInterface type, same content. -->
<Type Name="maxon::CString">
  <DisplayString>{*(maxon::CStringInterface*)_object}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::CStringInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to StringInterface type, same content. -->
<Type Name="maxon::String">
  <DisplayString>{*(maxon::StringInterface*)_object}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::StringInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::FormatStatement">
  <DisplayString Condition="_priv == 0">Empty</DisplayString>
  <DisplayString Condition="_priv != 0">{*(misc.module.xdl64!maxon::FormatStatementNatVisHelper*)_priv}</DisplayString>
  <Expand>
    <ExpandedItem>*(misc.module.xdl64!maxon::FormatStatementNatVisHelper*)_priv</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::Id">
  <DisplayString Condition="_value == 0">nullptr</DisplayString>
  <DisplayString Condition="_value != 0">{_value,sb}</DisplayString>
  <!-- Final default case just to avoid some natvis warnings (usual when debugging Opt like containers) -->
  <DisplayString>invalid</DisplayString>
  <StringView>_value,s</StringView>
    <Expand>
        <Item Name="Value">_value,s</Item>
        <Item Name="Hash">_hash,x</Item>
		</Expand>
</Type>

<Type Name="maxon::InternedId">
    <DisplayString>{*_id}</DisplayString>
</Type>

<Type Name="maxon::Url">
    <DisplayString Condition="_object == 0">nullptr</DisplayString>
    <DisplayString Condition="_object != 0 &amp;&amp; ((maxon::Url*)(((int*)(((char*)_object)+0+2*sizeof(char*)+sizeof(char*)))))->_object == 0">{{ {*(maxon::Id*)(((int*)(((char*)_object)+0)))} Path: {*(maxon::String*)(((int*)(((char*)_object)+0+2*sizeof(char*))))} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
    <DisplayString Condition="_object != 0 &amp;&amp; ((maxon::Url*)(((int*)(((char*)_object)+0+2*sizeof(char*)+sizeof(char*)))))->_object != 0">{{ {*(maxon::Id*)(((int*)(((char*)_object)+0)))} Authority: {*(maxon::Url*)(((int*)(((char*)_object)+0+3*sizeof(char*))))} Path: {*(maxon::String*)(((int*)(((char*)_object)+0+2*sizeof(char*))))} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
    <Expand>
        <Item Name="Protocol">*(maxon::Id*)(((int*)(((char*)_object)+0)))</Item>
        <Item Name="Path">*(maxon::String*)(((int*)(((char*)_object)+0+2*sizeof(char*))))</Item>
        <Item Name="Authority">*(maxon::Url*)(((int*)(((char*)_object)+0+3*sizeof(char*))))</Item>
        <Item Name="RefCnt">*((long*)(((char*)_object)-8))/16</Item>
        <Item Name="Data">*(maxon::DataDictionary*)(((int*)(((char*)_object)+0+3*sizeof(char*)+8)))</Item>
        <Item Name="TransientData">*(maxon::DataDictionary*)(((int*)(((char*)_object)+0+3*sizeof(char*)+8+8)))</Item>      
    </Expand>
</Type>

<!-- We need to use the hash value to identify the datatype, unfortunatly they are different for both 32 and 64 bit -->
<Type Name="maxon::Data">
    <DisplayString Condition="_typeInfo._ptr._object == 0">nullptr</DisplayString>

    <!-- SmallData cases -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x63aea)">{{ Bool: {*(Bool*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x69356)">{{ Char: {*(Char*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7514b)">{{ UChar: {*(UChar*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e54)">{{ Int16: {*(Int16*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25eff)">{{ UInt16: {*(UInt16*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e8e)">{{ Int32: {*(Int32*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f39)">{{ UInt32: {*(UInt32*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35eed)">{{ Int64: {*(Int64*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f98)">{{ UInt64: {*(UInt64*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x101bb)">{{ Float32: {*(Float32*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x1021a)">{{ Float64: {*(Float64*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x556ad)">{{ Vector2d32: {*(math.module.xdl64!maxon::Vec2&lt;float,1,void&gt;*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5622e)">{{ Vector2d64: {*(math.module.xdl64!maxon::Vec2&lt;double,1,void&gt;*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6c7cc)">{{ Vector32: {*(math.module.xdl64!maxon::Vec3&lt;float,1&gt;*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6d34d)">{{ Vector64: {*(math.module.xdl64!maxon::Vec3&lt;double,1&gt;*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x038eb)">{{ Vector4d32: {*(math.module.xdl64!maxon::Vec4&lt;float,1&gt;*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x0446c)">{{ Vector4d64: {*(math.module.xdl64!maxon::Vec4&lt;double,1&gt;*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3c358)">{{ String: {*(maxon::String*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x22f39)">{{ CString: {*(maxon::CString*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x44734)">{{ Url: {*(maxon::Url*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x62647)">{{ DataDictionary: {*(maxon::DataDictionary*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x40272)">{{ DataType: {*(maxon::DataType*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3f62b)">{{ ConditionVariableRef: {*(maxon::ConditionVariableRef*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x48360)">{{ ObjectRef: {*(maxon::ObjectRef*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5491a)">{{ InternedId: {*(maxon::InternedId*)(char*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5224e)">{{ NodePath: {*(nodes.module.xdl64!maxon::NodePath*)(char*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x19bdc)">{{ GraphModelRef: {*(nodes.module.xdl64!maxon::GraphModelRef*)(char*)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x749c7)">{{ Array&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)(char*)(&amp;_memBlock.dummy)} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7467d)">{{ BaseArray&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)(char*)(&amp;_memBlock.dummy)} }</DisplayString>

    <!-- BigData cases -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000448b1df5fc845 )">{{ IoNodePath: {*(nodes.module.xdl64!maxon::IoNodePath*)*(char**)&amp;_memBlock.dummy} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0002c884ee79c834 )">{{ Tuple&lt;NodePath,UChar&gt;: {*(nodes.module.xdl64!maxon::NodePath*)*(char**)&amp;_memBlock.dummy} {(nodes.module.xdl64!maxon::nodes::TemplateArguments::KIND*)((char*)_memBlock.dummy+sizeof(nodes.module.xdl64!maxon::NodePath*)),na} }} </DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00035ed2b365c45a )">{{ Tuple&lt;Id,InternedId&gt;: {*(misc.module.xdl64!maxon::IdInternedIdTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>
    <!-- Those create some issues... not sure why, disabling for now
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00032bd9406fc165 )">{{ Array&lt;Id,Data&gt;: {*(maxon::Array&lt;maxon::Tuple&lt;maxon::Id,maxon::Data&gt; &gt;*)(char**)&amp;_memBlock.dummy} }</DisplayString>
    -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e05749c7 )">{{ Array&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e057467d )">{{ BaseArray&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000358f5afaaba1a )">{{ Tuple&lt;InternedId,Id&gt;: {*(misc.module.xdl64!maxon::InternedIdTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0003bb5c76db7ea5 )">{{ Tuple&lt;String,String&gt;: {*(misc.module.xdl64!maxon::StringStringTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0004e858905580ec )">{{ Tuple&lt;NodePath,Array&lt;NodePath&gt;&gt;: {*(nodes.module.xdl64!maxon::NodePathArrayNodePathTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy} }}</DisplayString>

    <!-- Id is smalldata in 32 bit and bigdata in 64 bit -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x008100c6         )">{{ Id: {*(maxon::Id*)&amp;_memBlock.dummy} }</DisplayString>
		<DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000154931e777829 )">{{ Id: {*(maxon::Id*)*(char**)&amp;_memBlock.dummy} }</DisplayString>

		<!-- Last resort, generic display -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &lt;= 8">{{ {_typeInfo._ptr._object->_id} SmallData }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &gt; 8">{{ {_typeInfo._ptr._object->_id} BigData }</DisplayString>

    <DisplayString>Unknown</DisplayString>
 
    <Expand>
        <Item Name="DataTypeInfo">_typeInfo._ptr._object->_id</Item>

        <!-- SmallData cases -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x63aea)">*(Bool*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x69356)">*(Char*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7514b)">*(UChar*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e54)">*(Int16*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25eff)">*(UInt16*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e8e)">*(Int32*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f39)">*(UInt32*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35eed)">*(Int64*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f98)">*(UInt64*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x101bb)">*(Float32*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x1021a)">*(Float64*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x556ad)">*(math.module.xdl64!maxon::Vec2&lt;float,1,void&gt;*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5622e)">*(math.module.xdl64!maxon::Vec2&lt;double,1,void&gt;*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6c7cc)">*(math.module.xdl64!maxon::Vec3&lt;float,1&gt;*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6d34d)">*(math.module.xdl64!maxon::Vec3&lt;double,1&gt;*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x038eb)">*(math.module.xdl64!maxon::Vec4&lt;float,1&gt;*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x0446c)">*(math.module.xdl64!maxon::Vec4&lt;double,1&gt;*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3c358)">*(maxon::String*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x22f39)">*(maxon::CString*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x44734)">*(maxon::Url*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x62647)">*(maxon::DataDictionary*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x40272)">*(maxon::DataType*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3f62b)">*(maxon::ConditionVariableRef*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x48360)">*(maxon::ObjectRef*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5491a)">*(maxon::InternedId*)(char*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5224e)">*(nodes.module.xdl64!maxon::NodePath*)(char*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x19bdc)">*(nodes.module.xdl64!maxon::GraphModelRef*)(char*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x749c7)">*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)(char*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7467d)">*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)(char*)&amp;_memBlock.dummy</ExpandedItem>

        <!-- BigData cases -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000448b1df5fc845 )">*(nodes.module.xdl64!maxon::IoNodePath*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0002c884ee79c834 )">*(nodes.module.xdl64!maxon::NodePath*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00035ed2b365c45a )">*(misc.module.xdl64!maxon::IdInternedIdTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <!-- Those create some issues... not sure why, disabling for now
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00032bd9406fc165 )">*(maxon::Array&lt;maxon::Tuple&lt;maxon::Id,maxon::Data&gt; &gt;*)(char**)&amp;_memBlock.dummy</ExpandedItem>
        -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e05749c7 )">*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e057467d )">*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000358f5afaaba1a )">*(misc.module.xdl64!maxon::InternedIdTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0003bb5c76db7ea5 )">*(misc.module.xdl64!maxon::StringStringTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0004e858905580ec )">*(nodes.module.xdl64!maxon::NodePathArrayNodePathTupleNatVisHelper*)*(char**)&amp;_memBlock.dummy</ExpandedItem>

        <!-- Id is smalldata in 32 bit and bigdata in 64 bit -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x008100c6         )">*(maxon::Id*)&amp;_memBlock.dummy</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000154931e777829 )">*(maxon::Id*)*(char**)&amp;_memBlock.dummy</ExpandedItem>

        <!-- Last resort, generic display -->
        <Item Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &lt;= 8" Name="Small DataPtr">&amp;_memBlock.dummy</Item>
        <Item Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &gt; 8" Name="Big DataPtr">*(char**)&amp;_memBlock.dummy</Item>
		</Expand>
</Type>

<!-- We need to use the hash value to identify the datatype, unfortunatly they are different for both 32 and 64 bit -->
<Type Name="maxon::ConstDataPtr">
    <DisplayString Condition="_typeInfo._ptr._object == 0">nullptr</DisplayString>

    <!-- SmallData cases -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x63aea)">{{ Bool: {*(Bool*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x69356)">{{ Char: {*(Char*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7514b)">{{ UChar: {*(UChar*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e54)">{{ Int16: {*(Int16*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25eff)">{{ UInt16: {*(UInt16*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e8e)">{{ Int32: {*(Int32*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f39)">{{ UInt32: {*(UInt32*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35eed)">{{ Int64: {*(Int64*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f98)">{{ UInt64: {*(UInt64*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x101bb)">{{ Float32: {*(Float32*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x1021a)">{{ Float64: {*(Float64*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x556ad)">{{ Vector2d32: {*(math.module.xdl64!maxon::Vec2&lt;float,1,void&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5622e)">{{ Vector2d64: {*(math.module.xdl64!maxon::Vec2&lt;double,1,void&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6c7cc)">{{ Vector32: {*(math.module.xdl64!maxon::Vec3&lt;float,1&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6d34d)">{{ Vector64: {*(math.module.xdl64!maxon::Vec3&lt;double,1&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x038eb)">{{ Vector4d32: {*(math.module.xdl64!maxon::Vec4&lt;float,1&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x0446c)">{{ Vector4d64: {*(math.module.xdl64!maxon::Vec4&lt;double,1&gt;*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3c358)">{{ String: {*(maxon::String*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x22f39)">{{ CString: {*(maxon::CString*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x44734)">{{ Url: {*(maxon::Url*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x62647)">{{ DataDictionary: {*(maxon::DataDictionary*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x40272)">{{ DataType: {*(maxon::DataType*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3f62b)">{{ ConditionVariableRef: {*(maxon::ConditionVariableRef*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x48360)">{{ ObjectRef: {*(maxon::ObjectRef*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5491a)">{{ InternedId: {*(maxon::InternedId*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5224e)">{{ NodePath: {*(nodes.module.xdl64!maxon::NodePath*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x19bdc)">{{ GraphModelRef: {*(nodes.module.xdl64!maxon::GraphModelRef*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x749c7)">{{ Array&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7467d)">{{ BaseArray&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)_dataPtr} }</DisplayString>

    <!-- BigData cases -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000448b1df5fc845 )">{{ IoNodePath: {*(nodes.module.xdl64!maxon::IoNodePath*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0002c884ee79c834 )">{{ NodePath: {*(nodes.module.xdl64!maxon::NodePath*)_dataPtr} }</DisplayString>
    <!-- Those create some issues... not sure why, disabling for now
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00032bd9406fc165 )">{{ Array&lt;Id,Data&gt;: {*(maxon::Array&lt;maxon::Tuple&lt;maxon::Id,maxon::Data&gt; &gt;*)_dataPtr} }</DisplayString>
    -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e05749c7 )">{{ Array&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)_dataPtr} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e057467d )">{{ BaseArray&lt;InternedId&gt;: {*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)_dataPtr} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000358f5afaaba1a )">{{ Tuple&lt;InternedId,Id&gt;: {*(misc.module.xdl64!maxon::InternedIdTupleNatVisHelper*)_dataPtr} }}</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0003bb5c76db7ea5 )">{{ Tuple&lt;String,String&gt;: {*(misc.module.xdl64!maxon::StringStringTupleNatVisHelper*)_dataPtr} }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0004e858905580ec )">{{ Tuple&lt;NodePath,Array&lt;NodePath&gt;&gt;: {*(nodes.module.xdl64!maxon::NodePathArrayNodePathTupleNatVisHelper*)_dataPtr} }</DisplayString>

		<!-- Id is smalldata in 32 bit and bigdata in 64 bit -->
		<DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x008100c6         )">{{ Id: {*(maxon::Id*)_dataPtr} }</DisplayString>
		<DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000154931e777829 )">{{ Id: {*(maxon::Id*)_dataPtr} }</DisplayString>

    <!-- Last resort, generic display -->
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &lt;= 8">{{ {_typeInfo._ptr._object->_id} SmallData }</DisplayString>
    <DisplayString Condition="_typeInfo._ptr._object != 0 &amp;&amp; _typeInfo._ptr._object->_size &gt; 8">{{ {_typeInfo._ptr._object->_id} BigData }</DisplayString>
    <Expand>
        <Item Name="DataTypeInfo">_typeInfo._ptr._object->_id</Item>

        <!-- SmallData cases -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x63aea)">*(Bool*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x69356)">*(Char*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7514b)">*(UChar*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e54)">*(Int16*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25eff)">*(UInt16*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35e8e)">*(Int32*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f39)">*(UInt32*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x35eed)">*(Int64*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x25f98)">*(UInt64*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x101bb)">*(Float32*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x1021a)">*(Float64*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x556ad)">*(math.module.xdl64!maxon::Vec2&lt;float,1,void&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5622e)">*(math.module.xdl64!maxon::Vec2&lt;double,1,void&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6c7cc)">*(math.module.xdl64!maxon::Vec3&lt;float,1&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x6d34d)">*(math.module.xdl64!maxon::Vec3&lt;double,1&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x038eb)">*(math.module.xdl64!maxon::Vec4&lt;float,1&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x0446c)">*(math.module.xdl64!maxon::Vec4&lt;double,1&gt;*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3c358)">*(maxon::String*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x22f39)">*(maxon::CString*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x44734)">*(maxon::Url*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x62647)">*(maxon::DataDictionary*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x40272)">*(maxon::DataType*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x3f62b)">*(maxon::ConditionVariableRef*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x48360)">*(maxon::ObjectRef*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5491a)">*(maxon::InternedId*)*(char**)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x5224e)">*(nodes.module.xdl64!maxon::NodePath*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x19bdc)">*(nodes.module.xdl64!maxon::GraphModelRef*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x749c7)">*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; ((_typeInfo._ptr._object->_id._hash &amp; 0x7ffff) == 0x7467d)">*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)_dataPtr</ExpandedItem>

        <!-- BigData cases -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000448b1df5fc845 )">*(nodes.module.xdl64!maxon::IoNodePath*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0002c884ee79c834 )">*(nodes.module.xdl64!maxon::NodePath*)_dataPtr</ExpandedItem>
        <!-- Those create some issues... not sure why, disabling for now
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00032bd9406fc165 )">*(maxon::Array&lt;maxon::Tuple&lt;maxon::Id,maxon::Data&gt; &gt;*)_dataPtr</ExpandedItem>
        -->
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e05749c7 )">*(misc.module.xdl64!maxon::InternedIdArrayNatVisHelper*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x00020aa5e057467d )">*(misc.module.xdl64!maxon::InternedIdBaseArrayNatVisHelper*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000358f5afaaba1a )">*(misc.module.xdl64!maxon::InternedIdTupleNatVisHelper*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0003bb5c76db7ea5 )">*(misc.module.xdl64!maxon::StringStringTupleNatVisHelper*)_dataPtr</ExpandedItem>
        <ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x0004e858905580ec )">*(nodes.module.xdl64!maxon::NodePathArrayNodePathTupleNatVisHelper*)_dataPtr</ExpandedItem>

        <!-- Id is smalldata in 32 bit and bigdata in 64 bit -->
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x008100c6         )">*(maxon::Id*)_dataPtr</ExpandedItem>
				<ExpandedItem Condition="_typeInfo._ptr._object != 0 &amp;&amp; (_typeInfo._ptr._object->_id._hash == 0x000154931e777829 )">*(maxon::Id*)_dataPtr</ExpandedItem>
		</Expand>
</Type>

<Type Name="maxon::BaseArray&lt;*&gt;">
    <DisplayString Condition="_cnt &gt; 7">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}, {_ptr[3]}, {_ptr[4]}, {_ptr[5]}, {_ptr[6]}, ...] }</DisplayString>
    <DisplayString Condition="_cnt == 7">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}, {_ptr[3]}, {_ptr[4]}, {_ptr[5]}, {_ptr[6]}] }</DisplayString>
    <DisplayString Condition="_cnt == 6">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}, {_ptr[3]}, {_ptr[4]}, {_ptr[5]}] }</DisplayString>
    <DisplayString Condition="_cnt == 5">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}, {_ptr[3]}, {_ptr[4]}] }</DisplayString>
    <DisplayString Condition="_cnt == 4">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}, {_ptr[3]}] }</DisplayString>
    <DisplayString Condition="_cnt == 3">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}, {_ptr[2]}] }</DisplayString>
    <DisplayString Condition="_cnt == 2">{{ Count={(size_t) _cnt} [{_ptr[0]}, {_ptr[1]}] }</DisplayString>
    <DisplayString Condition="_cnt == 1">{{ Count={(size_t) _cnt} [{_ptr[0]}] }</DisplayString>
    <DisplayString Condition="_cnt == 0">{{ Count={(size_t) _cnt} }</DisplayString>
    <Expand>
        <Item Name="Size">_cnt</Item>
        <Item Name="Capacity">_capacity</Item>
        <Item Name="Pointer">_ptr, [_cnt]</Item>
        <ArrayItems>
            <Size>_cnt</Size>
            <ValuePointer>_ptr</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::BlockArray&lt;*&gt;">
    <DisplayString Condition="_blocks._array._cnt == 1">Elements: {{ Count={(size_t) _blocks._array._ptr[0]._cnt} }</DisplayString>
    <DisplayString Condition="_blocks._array._cnt != 1">Blocks: {{ Count={(size_t) _blocks._array._cnt} }</DisplayString>
    <Expand>
        <Item Name="IsContinuous" >_blocks._isContinuous</Item>
        <Item Condition="_blocks._array._cnt == 1" Name="Size" >_blocks._array._ptr[0]._cnt</Item>
        <Item Condition="_blocks._array._cnt == 1" Name="Capacity">_blocks._array._ptr[0]._capacity</Item>
        <Item Condition="_blocks._array._cnt == 1" Name="Pointer">_blocks._array._ptr[0]._ptr, [_blocks._array._ptr[0]._cnt]</Item>
        <ArrayItems Condition="_blocks._array._cnt == 1">
            <Size>_blocks._array._ptr[0]._cnt</Size>
            <ValuePointer>_blocks._array._ptr[0]._ptr</ValuePointer>
        </ArrayItems>

        <Item Condition="_blocks._array._cnt != 1" Name="Blocks" >_blocks._array._cnt</Item>
        <ArrayItems Condition="_blocks._array._cnt != 1">
            <Size>_blocks._array._cnt</Size>
            <ValuePointer>_blocks._array._ptr</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::SortedArray&lt;*&gt;">
    <DisplayString Condition="_array._cnt &gt; 3">{{ Sorted={_sorted}, Count={(size_t) _array._cnt} [{_array._ptr[0]}, {_array._ptr[1]}, {_array._ptr[2]}, {_array._ptr[3]}, ...] }</DisplayString>
    <DisplayString Condition="_array._cnt == 3">{{ Sorted={_sorted}, Count={(size_t) _array._cnt} [{_array._ptr[0]}, {_array._ptr[1]}, {_array._ptr[2]}] }</DisplayString>
    <DisplayString Condition="_array._cnt == 2">{{ Sorted={_sorted}, Count={(size_t) _array._cnt} [{_array._ptr[0]}, {_array._ptr[1]}] }</DisplayString>
    <DisplayString Condition="_array._cnt == 1">{{ Sorted={_sorted}, Count={(size_t) _array._cnt} [{_array._ptr[0]}] }</DisplayString>
    <DisplayString Condition="_array._cnt == 0">{{ Sorted={_sorted}, Count={(size_t) _array._cnt} }</DisplayString>
    <Expand>
        <Item Name="Sorted">_sorted</Item>
        <ExpandedItem>_array</ExpandedItem>
    </Expand>
</Type>

<Type Name="maxon::Block&lt;*&gt;">
    <DisplayString>{{ Count={(size_t) _size} Stride: {$T2}}</DisplayString>
    <Expand>
        <Item Name="Size">_size</Item>
        <Item Name="Pointer">($T1*)_ptr, [_size]</Item>
        <Item Name="Stride" Optional="true">_stride</Item>
        <ArrayItems Condition="$T2 != 1">
            <Size>_size</Size>
            <ValuePointer>($T1*)_ptr</ValuePointer>
        </ArrayItems>
        <IndexListItems Optional="true" Condition="{$T2} == 1">
            <Size>_size</Size>
            <ValueNode>*($T1*)(((char*)_ptr) + $i * _stride)</ValueNode>
        </IndexListItems>
    </Expand>
</Type>

<Type Name="maxon::ConditionVariableRef">
    <DisplayString Condition="_object == 0">nullptr</DisplayString>
    <DisplayString Condition="_object != 0">{{ CurrentCnt={(*((long*)(((char*)_object)+0)))} SetCnt={(*((long*)(((char*)_object)+0+4)))}  RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
    <Expand>
        <Item Name="CurrentCnt">*((long*)(((char*)_object)+0))</Item>
        <Item Name="SetCnt">*((long*)(((char*)_object)+0+4))</Item>
        <Item Name="RefCnt">*((long*)(((char*)_object)-8))/16</Item>
    </Expand>
</Type>

<!-- Helper for ObjectRef (ClassInfo) -->
<Type Name="maxon::ComponentInfo">
  <DisplayString>{{ {_descriptor->_super,s} }</DisplayString>
</Type>

<Type Name="maxon::ObjectSuper">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Name={_classInfo->_base._name}</DisplayString>
  <Expand>
     <Item Name="Name">_classInfo->_base._name</Item>
     <Item Name="Pointer">(void*)this</Item>
     <Item Name="Components">_components,10</Item>
  </Expand>
</Type>

<Type Name="maxon::RefBase&lt;*&gt;">
  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0" Optional="true">{{ RefCnt: {(*((long*)(((char*)_object)-8))/16)}x {*_object->_classInfo->_base._class} }</DisplayString>
  <DisplayString Condition="*(char**)this != 0">Non virtual interface. RefCnt: {(*((long*)(((char*)_object)-8))/16)}x Pointer: {_object}</DisplayString>
  <!-- Fallback case, add type if needed. Can we fetch the type of refenrence (REFERENCE_KIND) ? -->
  <Expand>
    <Item Name="RefCnt">(*((long*)(((char*)_object)-8))/16)</Item>
    <Item Name="Pointer">_object</Item>
    <!-- Optional in case it's a MAXON_REFERENCE_CONST or non virtual interface -->
    <Item Name="ClassInfo" Optional="true">*_object->_classInfo->_base._class</Item>
    <Item Name="Components" Optional="true">&amp;_object->_components[1], 9</Item>
  </Expand>
</Type>

<Type Name="maxon::ClassInterface">
  <Intrinsic Name="GetId" Expression="(maxon::Id&amp;)(*((char*)this + 0))" />

  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0">Id={GetId()}</DisplayString>
  <Expand>
    <Item Name="Id">GetId()</Item>
    <Item Name="DataType">(maxon::DataType&amp;)(*((char*)this + 40))</Item>
    <Item Name="Size">*((Int64*)((char*)this + 72))</Item>
    <Item Name="Alignment">*((Int64*)((char*)this + 80))</Item>
    <Item Name="Kind">(maxon::ClassInterface::KIND)*((char*)this + 104)</Item>
    <Item Name="Components">(misc.module.xdl64!maxon::ComponentInfoPointerArrayNatVisHelper*)((char*)this + 136)</Item>
    <Item Name="Meta">(maxon::DataDictionary&amp;)(*((char*)this + 112))</Item>
    <Item Name="ClassAndComponents">(maxon::CString&amp;)(*((char*)this + 192))</Item>
  </Expand>
</Type>

<!-- Can't use maxon::RefBase visualizer here cause it assumes ref is non const -->
<!-- Redirect to interface class vis -->
<Type Name="maxon::Class&lt;*&gt;">
  <DisplayString>{((maxon::ClassInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::ClassInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::Object::ConstFn&lt;*&gt;">
    <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
    <DisplayString Condition="*(char**)this != 0">{{ {*((const maxon::ClassInfo* const)**(char***)this)->_class} RefCnt: {*(long*)(*(char**)this-sizeof(char*))/16}x }</DisplayString>
    <Expand>
				<Item Name="ClassName">*((const maxon::ClassInfo* const)**(char***)this)->_class</Item>
	      <Item Name="RefCnt">*(long*)(*(char**)this-sizeof(char*))/16</Item>
	      <Item Name="Pointer">*(void**)this</Item>
	      <ExpandedItem>((const maxon::ClassInfo* const)**(char***)this)->_infoArray</ExpandedItem>
		</Expand>
</Type>

<!-- maxon::BaseRef general template -->
<Type Name="maxon::BaseRef&lt;*&gt;">
  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0">{{ RefCnt: {*(long*)(*(char**)this-sizeof(char*))/16}x }</DisplayString>
  <Expand>
    <Item Name="RefCnt">*(long*)(*(char**)this-sizeof(char*))/16</Item>
    <ExpandedItem>*_object</ExpandedItem>
  </Expand>
</Type>

<!-- maxon::BaseRef<*,maxon::UniqueRefHandler> 
  No ref counting here.
-->
<Type Name="maxon::BaseRef&lt;*,maxon::UniqueRefHandler&gt;">
  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0">{_object}</DisplayString>
  <Expand>
    <ExpandedItem>_object</ExpandedItem>
  </Expand>
</Type>

<!-- maxon::BaseRef template instance for InstantiationScopeRef -->
<Type Name="maxon::BaseRef&lt;maxon::BaseArray&lt;maxon::NodePath,16,0,maxon::DefaultAllocator&gt;const,maxon::StrongCOWRefHandler&gt;">
  <Intrinsic Name="GetArray" Expression="(maxon::BaseArray&lt;maxon::NodePath,16,0,maxon::DefaultAllocator&gt;*)(_object)" />

  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0 &amp;&amp; GetArray()->_cnt == 1">{{ Count={(size_t) GetArray()->_cnt} [{GetArray()->_ptr[0]}] }</DisplayString>
  <DisplayString Condition="*(char**)this != 0 &amp;&amp; GetArray()->_cnt == 0">{{ Count={(size_t) GetArray()->_cnt} }</DisplayString>

  <Expand>
    <Item Name="RefCnt">*(long*)(*(char**)this-sizeof(char*))/16</Item>
    <ExpandedItem>(maxon::BaseArray&lt;maxon::NodePath,16,0,maxon::DefaultAllocator&gt;*)(_object)</ExpandedItem>
  </Expand>
</Type>

<!-- Helper for HashMap -->
<!-- implementation without value, this one overwrites the other one if possible with the current datatype -->
<Type Name="maxon::HashMap&lt;*,maxon::UnitType,*&gt;::DefaultBucket{*">
    <DisplayString Condition="list->_next == 0">{{ Key={list->_key} Hash={list->_hashCode,x} }</DisplayString>
    <DisplayString Condition="list->_next != 0">{{ >>> Key={list->_key} Hash={list->_hashCode,x} }</DisplayString>
    <!-- To avoid some natvis warnings in the raw view display of certain hashmap -->
    <DisplayString>Empty List</DisplayString>
    <Expand>
      <Item Name="Next">list->_next</Item>
      <Item Name="Key">list->_key</Item>
      <Item Name="Hash">list->_hashCode</Item>
    </Expand>
</Type>
  
<!-- second implementation with value, this one overwrites the other one if possible with the current datatype -->
<Type Name="maxon::HashMap&lt;*&gt;::DefaultBucket{*">
    <DisplayString Condition="list->_next == 0">{{ Key={list->_key} Value={list->_value} }</DisplayString>
    <DisplayString Condition="list->_next != 0">{{ >>> Key={list->_key} Value={list->_value} }</DisplayString>
    <!-- To avoid some natvis warnings in the raw view display of certain hashmap -->
    <DisplayString>Empty List</DisplayString>
    <Expand>
      <Item Name="Next">list->_next</Item>
      <Item Name="Key">list->_key</Item>
      <Item Name="Value">list->_value</Item>
      <Item Name="Hash">list->_hashCode</Item>
    </Expand>
</Type>

<!-- Sync hash map -->
<Type Name="maxon::HashMap&lt;*,*,*,*,*,1,*,*,*&gt;">
    <DisplayString Condition="_nonemptyBucketCount == 0">{{ Mode=SYNCHRONIZED Count={(size_t) _size} }</DisplayString>
    <DisplayString Condition="_nonemptyBucketCount != 0">{{ Mode=SYNCHRONIZED Count={(size_t) _size} }</DisplayString>
    <Expand>
        <Item Name="Size">_size</Item>
        <!-- This shows lots of unused entries... Need a CustomListItems view for better debug.. -->
        <ArrayItems>
            <Size>_tableLengthM1</Size>
            <ValuePointer>_table</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<!-- All other hash map not specified above. -->
<Type Name="maxon::HashMap&lt;*&gt;">
    <DisplayString Condition="_nonemptyBucketCount == 0">{{ Mode={$T6} Count={(size_t) _size} }</DisplayString>
    <DisplayString Condition="_nonemptyBucketCount != 0">{{ Mode={$T6} Count={(size_t) _size} }</DisplayString>
    <Expand>
        <Item Name="Size">_size</Item>
        <ArrayItems>
            <Size>_nonemptyBucketCount</Size>
            <ValuePointer>_nonemptyBuckets,na</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::DataDictionary">
    <DisplayString Condition="_object == 0">Empty</DisplayString>
    <DisplayString Condition="_object != 0">{{ Type={*((int*)(((char*)_object)+0))} Elements={((misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)(((int*)(((char*)_object)+0+sizeof(int)+sizeof(char*)+(sizeof(char*)==8?sizeof(int):0)))))->_size} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
    <DisplayString Condition="_object != 0">{{ Type={*((int*)(((char*)_object)+0))} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x }</DisplayString>
    <Expand>
        <Item Condition="_object != 0" Name="Elements">((misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)(((int*)(((char*)_object)+0+sizeof(int)+sizeof(char*)+(sizeof(char*)==8?sizeof(int):0)))))->_size</Item>
        <Item Condition="_object != 0" Name="Buckets">((misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)(((int*)(((char*)_object)+0+sizeof(int)+sizeof(char*)+(sizeof(char*)==8?sizeof(int):0)))))->_nonemptyBucketCount</Item>
        <ArrayItems Condition="_object != 0">
            <Size>((misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)(((int*)(((char*)_object)+0+sizeof(int)+sizeof(char*)+(sizeof(char*)==8?sizeof(int):0)))))->_nonemptyBucketCount</Size>
            <ValuePointer>((misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)(((int*)(((char*)_object)+0+sizeof(int)+sizeof(char*)+(sizeof(char*)==8?sizeof(int):0)))))->_nonemptyBuckets,na</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::DataTypeImpl">
  <DisplayString>Id={_id._value,s}</DisplayString>
</Type>

<Type Name="maxon::DataType">
  <DisplayString Condition="_ptr._object == 0">Empty</DisplayString>
  <DisplayString Condition="_ptr._object != 0">Id={_ptr._object->_id._value,s}</DisplayString>
  <Expand>
    <Item Name="Id" Condition="_ptr._object != 0">_ptr._object->_id._value,s</Item>
    <Item Name="Hash" Condition="_ptr._object != 0">_ptr._object->_id._hash,x</Item>
    <Item Name="Size" Condition="_ptr._object != 0">_ptr._object->_size</Item>
    <Item Name="Pointer" Condition="_ptr._object != 0">(*(maxon::DataTypeImpl*)_ptr._object), hv</Item>
  </Expand>
</Type>

<Type Name="maxon::Spinlock">
    <DisplayString Condition="_state._value == 0">{{ Unlocked, _state={_state._value}}</DisplayString>
    <DisplayString Condition="_state._value == 1">{{ Locked, _state={_state._value}}</DisplayString>
    <DisplayString>{{ Illegal, _state={_state._value}}</DisplayString>
    <Expand>
				<Synthetic Name="Locked" Condition="_state._value == 0"><DisplayString>No</DisplayString></Synthetic>
				<Synthetic Name="Locked" Condition="_state._value == 1"><DisplayString>Yes</DisplayString></Synthetic>
        <Item Name="_state">_state._value</Item>
		</Expand>
</Type>

<Type Name="maxon::RWSpinlock">
    <DisplayString Condition="_state._value == 0">{{ Unlocked, _state={_state._value}}</DisplayString>
    <DisplayString Condition="_state._value &amp; 1">{{ Write Locked, _state={_state._value}}</DisplayString>
    <DisplayString>{{ ReadLocks={_state._value&gt;&gt;2} WriteLock={_state._value&amp;1} WritePending={(_state._value&amp;2)&gt;&gt;1} _state={_state._value}}</DisplayString>
    <Expand>
        <Item Name="ReadLocks">_state._value&gt;&gt;2</Item>
				<Synthetic Name="WriteLock" Condition="(_state._value &amp; 1) == 0"><DisplayString>No</DisplayString></Synthetic>
				<Synthetic Name="WriteLock" Condition="(_state._value &amp; 1) == 1"><DisplayString>Yes</DisplayString></Synthetic>
				<Synthetic Name="WritePending" Condition="(_state._value &amp; 2) == 0"><DisplayString>No</DisplayString></Synthetic>
				<Synthetic Name="WritePending" Condition="(_state._value &amp; 2) == 2"><DisplayString>Yes</DisplayString></Synthetic>
        <Item Name="_state">_state._value</Item>
		</Expand>
</Type>

<Type Name="maxon::LazyInit">
    <DisplayString Condition="_state._value == 0">{{ Uninitialized, _state={_state._value}}</DisplayString>
    <DisplayString Condition="_state._value == 1">{{ Initializing, _state={_state._value}}</DisplayString>
    <DisplayString Condition="_state._value == 2">{{ Initialized, _state={_state._value}}</DisplayString>
    <DisplayString>{{ Illegal, _state={_state._value}}</DisplayString>
    <Expand>
				<Synthetic Name="Initialized" Condition="_state._value == 0"><DisplayString>No</DisplayString></Synthetic>
				<Synthetic Name="Initialized" Condition="_state._value == 1"><DisplayString>Initializing</DisplayString></Synthetic>
				<Synthetic Name="Initialized" Condition="_state._value == 2"><DisplayString>Yes</DisplayString></Synthetic>
        <Item Name="_state">_state._value</Item>
		</Expand>
</Type>

<Type Name="maxon::AssetInterface">
  <Intrinsic Name="GetImpl" Expression="((asset.module.xdl64!maxon::AssetBaseImpl*)this->_components[1])" />

  <DisplayString Condition="this == 0">Nullptr</DisplayString>
  <DisplayString Condition="this != 0">Id={GetImpl()->_id.first} Type={GetImpl()->_id}</DisplayString>

  <Expand>
    <Item Name="Id">GetImpl()->_id.first</Item>
    <Item Name="Version">GetImpl()->_id.second</Item>
    <Item Name="Update">GetImpl()->_update</Item>
    <Item Name="Repository">GetImpl()->_repository</Item>
    <Item Name="Meta" Condition="GetImpl()->_meta.data != 0">GetImpl()->_meta</Item>
    <Item Name="Meta" Condition="GetImpl()->_meta.data == 0">"Empty",sb</Item>
  </Expand>
</Type>

<!-- Redirect to interface visualizer -->
<Type Name="maxon::Asset">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="_object != 0">{((maxon::AssetInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::AssetInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::AssetDescriptionInterface">
  <Intrinsic Name="GetImpl" Expression="((asset.module.xdl64!maxon::AssetDescriptionImpl*)this->_components[1])" />

  <DisplayString Condition="this == 0">Nullptr</DisplayString>
  <DisplayString Condition="this != 0">Id={GetImpl()->_id.first} Type={GetImpl()->_type}</DisplayString>

  <Expand>
    <Item Name="Class">_classInfo->_base._class</Item>
    <Item Name="Id">GetImpl()->_id.first</Item>
    <Item Name="Type">GetImpl()->_type</Item>
    <Item Name="Repository">GetImpl()->_repositoryId</Item>
    <Item Name="Url">GetImpl()->_url</Item>
    <Item Name="Meta" Condition="GetImpl()->_meta._object != 0">GetImpl()->_meta._object->_components[1]</Item>
    <Item Name="Components">_components</Item>
  </Expand>
</Type>

<!-- Redirect to interface visualizer -->
<Type Name="maxon::AssetDescription">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="_object != 0">{((maxon::AssetDescriptionInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::AssetDescriptionInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::MeshPolygon">
    <DisplayString Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._hullVertexCount == 3">{_ngon._hullVertexCount}-Gon [{((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[0]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[1]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[2]}]</DisplayString>
    <DisplayString Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._hullVertexCount == 4">{_ngon._hullVertexCount}-Gon [{((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[0]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[1]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[2]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[3]}]</DisplayString>
    <DisplayString Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._hullVertexCount == 5">{_ngon._hullVertexCount}-Gon [{((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[0]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[1]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[2]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[3]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[4]}]</DisplayString>
    <DisplayString Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._hullVertexCount == 6">{_ngon._hullVertexCount}-Gon [{((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[0]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[1]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[2]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[3]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[4]}, {((int*)(_ngon._ngonData + 2 + _ngon._ngonData[1]))[5]}]</DisplayString>
    <DisplayString Condition="_ngon._ngonIdentifier == -2">{_ngon._hullVertexCount}-Gon</DisplayString>
    <DisplayString Condition="_vertex[0]==0 &amp;&amp; _vertex[1]==0 &amp;&amp; _vertex[2]==0">Empty []</DisplayString>
    <DisplayString Condition="_vertex[3]==-1">Tri [{_vertex[0]}, {_vertex[1]}, {_vertex[2]}]</DisplayString>
    <DisplayString Condition="_vertex[3]!=-1">Quad [{_vertex[0]}, {_vertex[1]}, {_vertex[2]}, {_vertex[3]}]</DisplayString>
    <Expand>
        <Item Name="Hull Vertex Count" Condition="_ngon._ngonIdentifier == -2">_ngon._hullVertexCount</Item>
        <Item Name="Total Vertex Count" Condition="_ngon._ngonIdentifier == -2">_ngon._ngonData[0]</Item>
        <Item Name="Hole Count" Condition="_ngon._ngonIdentifier == -2">_ngon._ngonData[1]</Item>

				<Synthetic Name="Vertices"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2">
            <Size>_ngon._hullVertexCount</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1])</ValuePointer>
        </ArrayItems>
        <ArrayItems Condition="_ngon._ngonIdentifier != -2 &amp;&amp; _vertex[0]==0 &amp;&amp; _vertex[1]==0 &amp;&amp; _vertex[2]==0">
            <Size>0</Size>
            <ValuePointer>_vertex</ValuePointer>
        </ArrayItems>
        <ArrayItems Condition="_ngon._ngonIdentifier != -2 &amp;&amp; !(_vertex[0]==0 &amp;&amp; _vertex[1]==0 &amp;&amp; _vertex[2]==0) &amp;&amp; _vertex[3]==-1">
            <Size>3</Size>
            <ValuePointer>_vertex</ValuePointer>
        </ArrayItems>
        <ArrayItems Condition="_ngon._ngonIdentifier != -2 &amp;&amp; _vertex[3]!=-1">
            <Size>4</Size>
            <ValuePointer>_vertex</ValuePointer>
        </ArrayItems>

				<Synthetic Name="Vertices (Hole 0)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 1"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 1">
            <Size>_ngon._ngonData[0] - _ngon._ngonData[2]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[2])</ValuePointer>
        </ArrayItems>
				<Synthetic Name="Vertices (Hole 0)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 1"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 1">
            <Size>_ngon._ngonData[3] - _ngon._ngonData[2]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[2])</ValuePointer>
        </ArrayItems>

				<Synthetic Name="Vertices (Hole 1)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 2"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 2">
            <Size>_ngon._ngonData[0] - _ngon._ngonData[3]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[3])</ValuePointer>
        </ArrayItems>
				<Synthetic Name="Vertices (Hole 1)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 2"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 2">
            <Size>_ngon._ngonData[4] - _ngon._ngonData[3]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[3])</ValuePointer>
        </ArrayItems>

				<Synthetic Name="Vertices (Hole 2)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 3"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 3">
            <Size>_ngon._ngonData[0] - _ngon._ngonData[4]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[4])</ValuePointer>
        </ArrayItems>
				<Synthetic Name="Vertices (Hole 2)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 3"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 3">
            <Size>_ngon._ngonData[5] - _ngon._ngonData[4]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[4])</ValuePointer>
        </ArrayItems>

				<Synthetic Name="Vertices (Hole 3)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 4"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] == 4">
            <Size>_ngon._ngonData[0] - _ngon._ngonData[5]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[5])</ValuePointer>
        </ArrayItems>
				<Synthetic Name="Vertices (Hole 3)" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 4"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; _ngon._ngonData[1] &gt; 4">
            <Size>_ngon._ngonData[6] - _ngon._ngonData[5]</Size>
            <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[1] + _ngon._ngonData[5])</ValuePointer>
        </ArrayItems>

      <Synthetic Name="Plain Polygon [0]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 0"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 0">
          <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1])</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [1]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 1">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 1">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 4)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [2]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 2">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 2">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 8)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [3]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 3">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 3">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 12)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [4]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 4">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 4">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 16)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [5]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 5">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 5">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 20)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [6]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 6">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 6">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 24)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [7]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 7">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 7">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 28)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [8]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 8">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 8">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 32)</ValuePointer>
      </ArrayItems>

      <Synthetic Name="Plain Polygon [9]" Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 9">
        <DisplayString></DisplayString>
      </Synthetic>
      <ArrayItems Condition="_ngon._ngonIdentifier == -2 &amp;&amp; (_ngon._ngonData[0] + _ngon._ngonData[1] * 2 -2) > 9">
        <Size>4</Size>
        <ValuePointer>(int*)(_ngon._ngonData + 2 + _ngon._ngonData[0] + _ngon._ngonData[1] + 36)</ValuePointer>
      </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::MeshPolygonList">
    <DisplayString Condition="_list[0]==-1">0 Polygons</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[1]==-1">1 Polygon [{_list[0]}]</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[2]==-1">2 Polygons [{_list[0]}, {_list[1]}]</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[3]==-1">3 Polygons [{_list[0]}, {_list[1]}, {_list[2]}]</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[4]==-1">4 Polygons [{_list[0]}, {_list[1]}, {_list[2]}, {_list[3]}]</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[5]==-1">5 Polygons [{_list[0]}, {_list[1]}, {_list[2]}, {_list[3]}, {_list[4]}]</DisplayString>
    <DisplayString Condition="_list[0]!=-2 &amp;&amp; _list[5]!=-1">6 Polygons [{_list[0]}, {_list[1]}, {_list[2]}, {_list[3]}, {_list[4]}, {_list[5]}]</DisplayString>
    <DisplayString Condition="_list[0]==-2">{_list[1]} Polygons [{(*((UInt32**)(_list + 2)))[0]}, {(*((UInt32**)(_list + 2)))[1]}, {(*((UInt32**)(_list + 2)))[2]}, {(*((UInt32**)(_list + 2)))[3]}, {(*((UInt32**)(_list + 2)))[4]}, {(*((UInt32**)(_list + 2)))[5]}, ...]</DisplayString>
    <Expand>
				<Synthetic Name="Polygons"><DisplayString></DisplayString></Synthetic>
        <ArrayItems Condition="_list[0]==-2">
            <Size>_list[1]</Size>
            <ValuePointer>(*((UInt32**)(_list + 2)))</ValuePointer>
        </ArrayItems>
		</Expand>
</Type>

<Type Name="maxon::BigInteger">
  	<DisplayString Condition="_object == 0">nullptr</DisplayString>
  	<DisplayString Condition="_object != 0" LegacyAddin="legacy_typeviewer.dll" Export="BigInteger_Viewer"></DisplayString>
</Type>

<Type Name="maxon::RangeSet&lt;*&gt;">
  	<DisplayString LegacyAddin="legacy_typeviewer.dll" Export="XRangeSet_Viewer"></DisplayString>
</Type>

<Type Name="maxon::MeshPolygonSelection">
  	<DisplayString>{_polygons}</DisplayString>
</Type>

<Type Name="maxon::HybridSet&lt;*&gt;">
  	<DisplayString Condition="_small==true">{*((maxon::BaseArray&lt;$T1,16,0,maxon::DefaultAllocator&gt;*)_union)}</DisplayString>
  	<DisplayString Condition="_small==false">&gt;64 elements</DisplayString>
    <Expand>
        <ArrayItems Condition="_small==true">
            <Size>((maxon::BaseArray&lt;$T1,16,0,maxon::DefaultAllocator&gt;*)_union)->_cnt</Size>
            <ValuePointer>((maxon::BaseArray&lt;$T1,16,0,maxon::DefaultAllocator&gt;*)_union)->_ptr</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="maxon::neutron::HeatMapInterface">
  <Intrinsic Name="GetImpl" Expression="((neutron.module.xdl64!maxon::neutron::HeatMapImpl*)this)" />

  <DisplayString Condition="this == 0">Emoty</DisplayString>
  <DisplayString Condition="this != 0">Frames: {GetImpl()->_data._value._frames} Stamp: {GetImpl()->_data._value._stamp} Total: {GetImpl()->_data._value._totalNodeTime._value,g}</DisplayString>

  <Expand>
    <ExpandedItem>GetImpl()->_data</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to interface visualizer -->
<Type Name="maxon::neutron::HeatMap">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="_object != 0">{((maxon::neutron::HeatMapInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::neutron::HeatMapInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="nodes.module.xdl64!maxon::nodes::TemplateArguments">
  <DisplayString>{(maxon::DataDictionary&amp;)this->_args}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::DataDictionary&amp;)this->_args)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::NodePath">
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 0">
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 1">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}" 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 2">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[1]}" 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 3">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[1]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[2]}" 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 4">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[1]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[2]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[3]}" 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count == 5">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[1]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[2]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[3]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[4]}" 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind} 
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object != 0 &amp;&amp; ((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count >= 6">
"{(maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements),na}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[1]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[2]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[3]}/
{((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))[4]}/..." 
{((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind}
Count={(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count}
  </DisplayString>
  <DisplayString Condition="_object == 0">Empty (root)</DisplayString>
  <DisplayString Condition="true">invalid</DisplayString>
  <Expand>
    <Item Name="Count">(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._count.count</Item>
    <Item Name="Kind">((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->kind</Item>
    <ArrayItems Condition="_object != 0">
      <Size>((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path)->count</Size>
      <ValuePointer>((maxon::InternedId*)((*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this)->_path._elements))</ValuePointer>
    </ArrayItems>
    <Item Name="Path">*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)this</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::MutablePort">
	<DisplayString Condition="_node._data.ptr != 0">{*((maxon::NodePath*)&amp;this->_node._path)}</DisplayString>
	<DisplayString Condition="_node._data.ptr == 0">nullptr</DisplayString>
  <Expand>
    <Item Name="Path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="Kind">(maxon::NODE_KIND)(((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)&amp;this->_node._path._object)->_path)->kind &amp; 0xFF)</Item>
    <Item Name="Children">((nodes.module.xdl64!maxon::nodes::GNodeData*)(((Int)_node._data.ptr)&amp;~1))->children</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::MutablePortList">
  <DisplayString Condition="_node._data.ptr != 0">{*((maxon::NodePath*)&amp;this->_node._path)}</DisplayString>
  <DisplayString Condition="_node._data.ptr == 0">nullptr</DisplayString>
  <Expand>
    <Item Name="Path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="Kind">(maxon::NODE_KIND)(((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)&amp;this->_node._path._object)->_path)->kind &amp; 0xFF)</Item>
    <Item Name="Children">((nodes.module.xdl64!maxon::nodes::GNodeData*)(((Int)_node._data.ptr)&amp;~1))->children</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::MutableNode">
	<DisplayString Condition="_node._data.ptr != 0">{*((maxon::NodePath*)&amp;this->_node._path)}</DisplayString>
	<DisplayString Condition="_node._data.ptr == 0">nullptr</DisplayString>
	<Expand>
    <Item Name="Path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="Kind">(maxon::NODE_KIND)(((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)&amp;this->_node._path._object)->_path)->kind &amp; 0xFF)</Item>
    <Item Name="Children">((nodes.module.xdl64!maxon::nodes::GNodeData*)(((Int)_node._data.ptr)&amp;~1))->children</Item>
	</Expand>
</Type>

<Type Name="maxon::nodes::Port">
  <DisplayString>{*(maxon::nodes::MutablePort*)this}</DisplayString>
  <Expand>
    <Item Name="Path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="Kind">(maxon::NODE_KIND)(((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)&amp;this->_node._path._object)->_path)->kind &amp; 0xFF)</Item>
    <Item Name="Children">((nodes.module.xdl64!maxon::nodes::GNodeData*)(((Int)_node._data.ptr)&amp;~1))->children</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::PortList">
  <DisplayString>{*(maxon::nodes::MutablePortList*)this}</DisplayString>
  <Expand>
    <Item Name="Path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="Kind">(maxon::NODE_KIND)(((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*)&amp;(*(nodes.module.xdl64!maxon::nodes::NodePathImpl**)&amp;this->_node._path._object)->_path)->kind &amp; 0xFF)</Item>
    <Item Name="Children">((nodes.module.xdl64!maxon::nodes::GNodeData*)(((Int)_node._data.ptr)&amp;~1))->children</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::Node">
  <DisplayString>{*(maxon::nodes::MutableNode*)this}</DisplayString>
</Type>

<Type Name="maxon::nodes::MutableGNode">
	<DisplayString Condition="_system != nullptr">{*((maxon::NodePath*)&amp;this->_node._path)}</DisplayString>
	<DisplayString Condition="_system == nullptr">nullptr</DisplayString>
  <Expand>
    <Item Name="_system">this->_system</Item>
    <Item Name="_path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="_node">this->_node</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::GNode">
  <DisplayString>{*(maxon::nodes::MutableGNode*)this}</DisplayString>
  <Expand>
    <Item Name="_system">this->_system</Item>
    <Item Name="_path">*((maxon::NodePath*)&amp;this->_node._path)</Item>
    <Item Name="_node">this->_node</Item>
  </Expand>
</Type>

<Type Name="maxon::nodes::ValidatedHandle">
  <DisplayString>{*(maxon::nodes::GNodeHandle*)this}</DisplayString>
</Type>

<Type Name="maxon::nodes::NodeSystem">
  <DisplayString Condition="*((Int*)this) != 0">{((nodes.module.xdl64!maxon::nodes::NodeSystemImpl*)(*(char**)this+8))->_id}</DisplayString>
  <DisplayString Condition="*((Int*)this) == 0">nullptr</DisplayString>
  <Expand>
      <Item Name="content">*((nodes.module.xdl64!maxon::nodes::NodeSystemImpl**)this)</Item>
  </Expand>
</Type>

<!--
Lazily casting to NodesGraphModelImpl, most of the data to debug is there.
Can happen in some cases some higher level components are not in the GraphModelRef object.
-->
<Type Name="maxon::GraphModelInterface">
  <Intrinsic Name="GetImpl" Expression="((nodes.module.xdl64!maxon::nodes::NodesGraphModelImpl*)this->_components[2])" />

  <DisplayString Condition="this == 0">Nullptr</DisplayString>
  <DisplayString Condition="this != 0">{_classInfo->_base._class} Filter={GetImpl()->_filter}</DisplayString>

  <Expand>
    <Item Name="Class">_classInfo->_base._class</Item>
    <Item Name="View Path">GetImpl()->_rootPath</Item>
    <Item Name="Filter">GetImpl()->_filter</Item>
    <Item Name="Wires Filter">GetImpl()->_wiresFilter</Item>
    <Item Name="Wires Mask">GetImpl()->_wiresMask</Item>
  </Expand>
</Type>

<!-- Redirect to interface visualizer -->
<Type Name="maxon::GraphModelRef">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="_object != 0">{((maxon::GraphModelInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::GraphModelInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to interface visualizer -->
<Type Name="maxon::nodes::NodesGraphModelRef">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="_object != 0">{((maxon::GraphModelInterface*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((maxon::GraphModelInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::GraphNode">
  	<DisplayString Condition="_mem[0] != 0">{((maxon::NodePath*)&amp;_mem[0]),na}</DisplayString>
  	<!-- Root will have empty path and valid graph -->
    <DisplayString Condition="_mem[0] == 0 &amp;&amp; _graph._object != 0">Root</DisplayString>
    <DisplayString Condition="_mem[0] == 0">nullptr</DisplayString>
    <Expand>
      <Item Name="Path">(((maxon::NodePath*)&amp;_mem[0]))</Item>
      <Item Name="Kind">(maxon::NODE_KIND)((((nodes.module.xdl64!maxon::nodes::NodePathImpl::CountAndKind*) &amp; (*(nodes.module.xdl64!maxon::nodes::NodePathImpl**) &amp; _mem[0])->_path))->kind &amp; 0xFF)</Item>
      <Item Name="Graph">(this->_graph)</Item>
      <Item Name="Graph Storage">(this->_mem)</Item>
    </Expand>
</Type>

<Type Name="maxon::corenodes::CoreNodeBaseImpl">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Id={this->_id}</DisplayString>
</Type>

<!-- Redirect to single base class CoreNodeBaseImpl. -->
<Type Name="maxon::corenodes::CoreNode">
  <DisplayString>{((corenodes.module.xdl64!maxon::corenodes::CoreNodeBaseImpl*)_object),na}</DisplayString>
  <Expand>
    <ExpandedItem>((corenodes.module.xdl64!maxon::corenodes::CoreNodeBaseImpl*)_object)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::corenodes::CoreNodeInstanceImpl">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Name={this->_name} Base={this->_base}</DisplayString>
</Type>

<!-- To be completed, could be a MicroNodeInterface as well -->
<Type Name="maxon::corenodes::CoreNodeInstanceBaseInterface">
  <DisplayString>{(corenodes.module.xdl64!maxon::corenodes::CoreNodeInstanceImpl*)this,na}</DisplayString>
  <Expand>
    <ExpandedItem>((corenodes.module.xdl64!maxon::corenodes::CoreNodeInstanceImpl*)this)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::corenodes::InstructionImpl">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Node={this->_node->_node->_path}</DisplayString>
</Type>

<!-- Redirect to single base class InstructionImpl. -->
<Type Name="maxon::corenodes::Instruction">
  <DisplayString>{((corenodes.module.xdl64!maxon::corenodes::InstructionImpl*)this),na}</DisplayString>
  <Expand>
    <ExpandedItem>((corenodes.module.xdl64!maxon::corenodes::InstructionImpl*)this)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::corenodes::FrameImpl">
  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Members={this->_members}</DisplayString>
</Type>

<!-- Redirect to single base class FrameImpl. -->
<Type Name="maxon::corenodes::Frame">
  <DisplayString>{((corenodes.module.xdl64!maxon::corenodes::FrameImpl*)this),na}</DisplayString>
  <Expand>
    <ExpandedItem>((corenodes.module.xdl64!maxon::corenodes::FrameImpl*)this)</ExpandedItem>
  </Expand>
</Type>

<!-- Empty, using automatic VS listing. Type just has to be defined for SerializationNodeData redirection. -->
<Type Name="maxon::nodes::NodeDataIO">
</Type>

<!-- Redirect to impl NodeDataIO. -->
<Type Name="maxon::nodes::SerializationNodeData">
  <DisplayString>{((nodes.module.xdl64!maxon::nodes::NodeDataIO*)this),na}</DisplayString>
  <Expand>
    <ExpandedItem>((nodes.module.xdl64!maxon::nodes::NodeDataIO*)this)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::PresenterRef">
  <Intrinsic Name="GetDictionary" Expression="(misc.module.xdl64!maxon::DataDictionaryNatVisHelper*)((int*)(((char*)_object) + sizeof(int) + sizeof(char*) + 124))" />
  <Intrinsic Name="GetName" Expression="(String*)(((char*)_object->_components[2]) + 80)" />
  <Intrinsic Name="GetObjectSuper" Expression="(maxon::ObjectSuper*)_object" />
  <Intrinsic Name="GetParent" Expression="(maxon::PresenterRef*)(((char*)_object->_components[3]) + 32)" />

  <DisplayString Condition="this == 0">nullptr</DisplayString>
  <DisplayString Condition="this != 0">Name={GetName(),na} Property Count={GetDictionary()->_size}</DisplayString>
  <Expand>
    <Item Condition="_object != 0" Name="Name">GetName(),na</Item>
    <Item Condition="_object != 0" Name="Parent">GetParent(),na</Item>
    <Item Condition="_object != 0" Name="DataDictionaryObject">GetDictionary(),na</Item>
    <Item Condition="_object != 0" Name="Commands">_object->_components[6],na</Item>
    <Item Condition="_object != 0" Name="Object">GetObjectSuper(),na</Item>
  </Expand>
</Type>

<!-- Redirect to single base class PresenterRef. -->
<Type Name="maxon::GraphNodePresenterRef">
  <DisplayString>{(maxon::PresenterRef*)this,na}</DisplayString>
  <Expand>
    <ExpandedItem>(maxon::PresenterRef*)this</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to single base class PresenterRef. -->
<Type Name="maxon::NodePresenterRef">
  <DisplayString>{(maxon::PresenterRef*)this,na}</DisplayString>
  <Expand>
    <ExpandedItem>(maxon::PresenterRef*)this</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to single base class PresenterRef. -->
<Type Name="maxon::PortPresenterRef">
  <DisplayString>{(maxon::PresenterRef*)this,na}</DisplayString>
  <Expand>
    <ExpandedItem>(maxon::PresenterRef*)this</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to single base class PresenterRef. -->
<Type Name="maxon::WirePresenterRef">
  <Intrinsic Name="GetSource" Expression="(maxon::PortPresenterWeakRef*)(((char*)_object->_components[5]) + 16)" />
  <Intrinsic Name="GetTarget" Expression="(maxon::PortPresenterWeakRef*)(((char*)_object->_components[5]) + 24)" />

  <DisplayString>{(maxon::PresenterRef*)this,na}</DisplayString>
  <Expand>
    <Item Condition="_object != 0" Name="Source Port">GetSource(),na</Item>
    <Item Condition="_object != 0" Name="Target Port">GetTarget(),na</Item>
    <ExpandedItem>(maxon::PresenterRef*)this</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::ColorProfile">
	<DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
	<DisplayString Condition="*(char**)this != 0">{{ RefCnt: {(*((long*)(((char*)_object)-8))/16)}x Name: { *(maxon::String*)(*(Int*)_object + 40) } }</DisplayString>
	<Expand>
		<Item Name="RefCnt">(*((long*)(((char*)_object)-8))/16)</Item>
		<Item Name="Pointer">_object</Item>
	</Expand>
</Type>
	
<Type Name="maxon::LayerSet">
	<DisplayString Condition="_object == 0">Empty</DisplayString>
	<DisplayString Condition="_object != 0">{ (maxon::String*)((char*)_object + 64) } { (maxon::HashSet&lt;maxon::String,maxon::DefaultCompare,maxon::DefaultAllocator,0&gt;*)_object }</DisplayString>
	<Expand>
		<Item Name="Image">(maxon::String*)((char*)_object + 64)</Item>
		<Item Name="Layers">(maxon::HashSet&lt;maxon::String,maxon::DefaultCompare,maxon::DefaultAllocator,0&gt;*)_object</Item>
	</Expand>
</Type>

<Type Name="maxon::LayerSetInterface">
	<DisplayString Condition="this == 0">Empty</DisplayString>
	<DisplayString Condition="this != 0">{ (maxon::String*)((char*)this + 64) } { (maxon::HashSet&lt;maxon::String,maxon::LayerSetCompare,maxon::DefaultAllocator,0&gt;*)this }</DisplayString>
	<Expand>
		<Item Name="Image">(maxon::String*)((char*)this + 64)</Item>
		<Item Name="Layers">(maxon::HashSet&lt;maxon::String,maxon::LayerSetCompare,maxon::DefaultAllocator,0&gt;*)this</Item>
	</Expand>
</Type>

<Type Name="maxon::DataDescriptionDefinitionImpl">
  <DisplayString Condition="this == 0">Empty</DisplayString>
  <DisplayString Condition="this != 0">Entry Count={this->_description._cnt} Info={(maxon::DataDictionary*)&amp;this->_info,na}</DisplayString>
  <Expand>
    <Item Name="Info">this->_info</Item>
    <Item Name="Entries">this->_description</Item>
  </Expand>
</Type>

<Type Name="maxon::DataDescriptionDefinitionInterface">
  <DisplayString Condition="this == 0">Empty</DisplayString>
  <DisplayString Condition="this != 0">{this->_components[1],na}</DisplayString>
  <Expand>
    <Item Name="RefCnt">(*((long*)(((char*)this)-8))/16)</Item>
    <Item Name="Description">this->_components[1]</Item>
    <Item Name="Pointer">(void*)this</Item>
    <Item Name="ClassInfo">this->_classInfo</Item>
    <!-- Skip the index 0 component. -->
    <Item Name="Components">&amp;this->_components[1], 9</Item>
  </Expand>
</Type>

<!-- Redirect to DataDescriptionDefinitionInterface type, same content. -->
<Type Name="maxon::DataDescriptionDefinition">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString>{*(maxon::DataDescriptionDefinitionInterface*)_object}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::DataDescriptionDefinitionInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<!-- Not using maxon::BASEARRAYFLAGS::NONE in template args but rather 0. Otherwise c4dplugin module won't load the visualizer. -->
<Type Name="maxon::DataDescriptionInterface">
  <DisplayString Condition="this == 0">Empty</DisplayString>
  <DisplayString Condition="this != 0">Entry Count={((maxon::BaseArray&lt;maxon::DataDictionary,16,0,maxon::DefaultAllocator&gt;*)((char*)this + 8))->_cnt} Info={(maxon::DataDictionary*)((char*)this + 0),na}</DisplayString>
  <Expand>
    <Item Name="Info">(maxon::DataDictionary*)((char*)this + 0)</Item>
    <Item Name="Array">(maxon::BaseArray&lt;maxon::DataDictionary,16,0,maxon::DefaultAllocator&gt;*)((char*)this + 8)</Item>
  </Expand>
</Type>

<!-- Redirect to DataDescriptionInterface type, same content. -->
<Type Name="maxon::DataDescription">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString>{*(maxon::DataDescriptionInterface*)_object}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::DataDescriptionInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<!-- This interface has many implementations, not all exposed to natvis directly. So just use auto visualizer output. -->
<Type Name="maxon::DataDescriptionDefinitionDatabaseImplInterface">
  <DisplayString Condition="this == 0">Empty</DisplayString>
  <DisplayString Condition="this != 0">{this->_components[1],na}</DisplayString>
  <Expand>
    <ExpandedItem>this->_components[1]</ExpandedItem>
  </Expand>
</Type>

<!-- Redirect to DataDescriptionDefinitionDatabaseImplInterface type, same content. -->
<Type Name="maxon::DataDescriptionDefinitionDatabaseImplRef">
  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString>{*(maxon::DataDescriptionDefinitionDatabaseImplInterface*)_object}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::DataDescriptionDefinitionDatabaseImplInterface*)_object)</ExpandedItem>
  </Expand>
</Type>

<!-- This is GENERIC array, element type is always Char. -->
<Type Name="maxon::GenericBaseArrayImpl">
  <DisplayString Condition="this == 0">Empty</DisplayString>
  <DisplayString Condition="this != 0">Count={this->_array._cnt} Array={this->_array._ptr}</DisplayString>
</Type>


<!-- TODO BlockArray is missing. PointerArray too? WritableArrayInterface ?-->
<Type Name="maxon::StaticArray&lt;*&gt;">
  <!-- Workaround, clang name starts with "maxon::" while masvc "class maxon::"-->
  <Intrinsic Name="IsBaseArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsPagedArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::PagedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::PagedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsSingleValueArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::SingleValueArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::SingleValueArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsSlicedArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::SlicedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::SlicedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsMemberArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::MemberArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::MemberArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsBlockArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::BlockArrayImplBase,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::BlockArrayImplBase,&quot;, _object->_vtableCls->_nameLength) == 0" />
  
  <Intrinsic Name="GetBaseImplPtr" Expression="(void**)(((char*)_object) + 16)" />
  <Intrinsic Name="GetBaseImplPtrArray" Expression="($T1*)(*(char**)GetBaseImplPtr())" />
  <Intrinsic Name="GetBaseImplCount" Expression="*(Int*)(((char*)_object) + 24)" />
  
  <Intrinsic Name="GetPagedImplBase" Expression="(maxon::StaticArray&lt;$T1&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetPagedImplBaseCount" Expression="*(Int*)(((char*)_object) + 32)" />
  <Intrinsic Name="GetPagedImplPagePtr" Expression="(void**)(((char*)_object) + 56)" />
  <Intrinsic Name="GetPagedImplPageCount" Expression="*(Int*)(((char*)_object) + 64)" />
  <Intrinsic Name="GetPagedImplPageCapacity" Expression="*(Int*)(((char*)_object) + 72)" />
  <Intrinsic Name="GetPagedImplCount" Expression="*(Int*)(((char*)_object) + 80)" />
  <Intrinsic Name="GetPagedImplDefault" Expression="*($T1**)(((char*)_object) + 96)" />
  
  <Intrinsic Name="GetSingleImplCount" Expression="*(Int*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetSingleImplValue" Expression="*($T1*)(((char*)_object) + 56)" />

  <Intrinsic Name="GetSlicedImplBase" Expression="(maxon::StaticArray&lt;$T1&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetSlicedImplStart" Expression="*(Int*)(((char*)_object) + 32)" />
  <Intrinsic Name="GetSlicedImplEnd" Expression="*(Int*)(((char*)_object) + 40)" />
  <Intrinsic Name="GetSlicedImplCount" Expression="GetSlicedImplEnd() - GetSlicedImplStart()" />
  <Intrinsic Name="GetSlicedImplCycle" Expression="*(Bool*)(((char*)_object) + 48)" />
  <Intrinsic Name="GetSlicedImplDefault" Expression="*($T1**)(((char*)_object) + 56)" />

  <Intrinsic Name="GetMemberImplBase" Expression="(maxon::StaticArray&lt;$T1&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetMemberImplOffset" Expression="*(Int*)(((char*)_object) + 48)" />
  <Intrinsic Name="GetMemberImplFullSize" Expression="*(Bool*)(((char*)_object) + 50)" />

  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="IsBaseArray() &amp;&amp; GetBaseImplCount()&gt;2">Count={GetBaseImplCount()} Ptr={GetBaseImplPtrArray()[0],na},{GetBaseImplPtrArray()[1],na},...</DisplayString>
  <DisplayString Condition="IsBaseArray() &amp;&amp; GetBaseImplCount()&gt;1">Count={GetBaseImplCount()} Ptr={GetBaseImplPtrArray()[0],na},{GetBaseImplPtrArray()[1],na}</DisplayString>
  <DisplayString Condition="IsBaseArray() &amp;&amp; GetBaseImplCount()&gt;0">Count={GetBaseImplCount()} Ptr={GetBaseImplPtrArray()[0],na}</DisplayString>
  <DisplayString Condition="IsBaseArray()">Count={GetBaseImplCount()}</DisplayString>
  <DisplayString Condition="IsPagedArray()">Count={GetPagedImplCount()}</DisplayString>
  <DisplayString Condition="IsSingleValueArray()">Count={GetSingleImplCount()} Ptr={GetSingleImplValue()}</DisplayString>
  <DisplayString Condition="IsSlicedArray()">Count={GetSlicedImplCount()}</DisplayString>
  <DisplayString Condition="IsMemberArray()">Type={"$T1",sb} Interfaces=MemberArray</DisplayString>
  <DisplayString>Type={"$T1",sb} Interfaces=Unknown</DisplayString>
  <Expand>
    <Item Name="RefCnt" ExcludeView="countonly">(*((long*)(((char*)_object)-8))/16)</Item>

    <!-- Base array impl. Count item is only for showing when array is base for a MemberArrayImpl. -->
    <Item Name="Type" Condition="IsBaseArray()">"$T1"</Item>
    <Item Name="Interfaces" Condition="IsBaseArray()">"BaseArray"</Item>
    <Item Name="Count" Condition="IsBaseArray()">GetBaseImplCount()</Item>
    <Item Name="Pointer" Condition="IsBaseArray()" ExcludeView="countonly">GetBaseImplPtrArray()</Item>
    <ArrayItems Condition="IsBaseArray()" ExcludeView="countonly">
      <Size>GetBaseImplCount()</Size>
      <ValuePointer>GetBaseImplPtrArray()</ValuePointer>
    </ArrayItems>

    <!-- Paged array impl. Without directly casting to PagedArrayImpl::Page (need exe name hardcoded), this is best way to show the page content
    as we need the $T1 to available to cast content. -->
    <Item Name="Type" Condition="IsPagedArray()">"$T1"</Item>
    <Item Name="Interfaces" Condition="IsPagedArray()">"PagedArray"</Item>
    <Item Name="Count" Condition="IsPagedArray()">(GetPagedImplCount())</Item>
    <Item Name="Default" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplDefault())</Item>
    <Item Name="Page Count" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPageCount())</Item>
    <Item Name="Page Capacity" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPageCapacity())</Item>
    <Item Name="Page Pointer" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPagePtr())</Item>
    <CustomListItems MaxItemsPerView="500" Condition="IsPagedArray()" ExcludeView="countonly">
      <Variable Name="i" InitialValue="0" />
      <Variable Name="pageData" InitialValue="(void*)(0)" />
      <Exec>i = 0</Exec>
      <Loop>
        <Break Condition="i >= GetPagedImplPageCount()" />
        <Exec>pageData = ( *(void**) ( ((char*)*GetPagedImplPagePtr()) + i * 16 ) )</Exec>
        <Item Name="[Page{i} RefCnt]">(*((long*)(((char*)pageData) - 8)) / 16)</Item>
        <Item Name="[Page{i} Count]">*((Int32*)(((char*)*GetPagedImplPagePtr()) + 8)), na</Item>
        <Item Name="[Page{i} Ptr]">($T1*)((char*)pageData + 0), 1024</Item>
        <Exec>i++</Exec>
      </Loop>
    </CustomListItems>
    <Item Name="Base" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplBase())</Item>

    <!-- Single array impl. -->
    <Item Name="Type" Condition="IsSingleValueArray()">"$T1"</Item>
    <Item Name="Interfaces" Condition="IsSingleValueArray()">"SingleValueArray"</Item>
    <Item Name="Count" Condition="IsSingleValueArray()">GetSingleImplCount()</Item>
    <Item Name="Value" Condition="IsSingleValueArray()" ExcludeView="countonly">GetSingleImplValue()</Item>
    
    <!-- Sliced array impl. -->
    <Item Name="Type" Condition="IsSlicedArray()">"$T1"</Item>
    <Item Name="Interfaces" Condition="IsSlicedArray()">"SlicedArray"</Item>
    <Item Name="Count" Condition="IsSlicedArray()">GetSlicedImplEnd() - GetSlicedImplStart()</Item>
    <Item Name="Start" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplStart()</Item>
    <Item Name="End" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplEnd()</Item>
    <Item Name="Cycle" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplCycle()</Item>
    <Item Name="Default" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplDefault()</Item>
    <Item Name="Base" Condition="IsSlicedArray()" ExcludeView="countonly">(GetSlicedImplBase())</Item>

    <!-- Member array impl. No way to show count nicely as displaystring unless duplicating get count natvis code for all types, use ExpandedItem here. -->
    <ExpandedItem Condition="IsMemberArray()">(*GetMemberImplBase()),view(countonly)</ExpandedItem>
    <Item Name="Type" Condition="IsMemberArray()">"$T1"</Item>
    <Item Name="Interfaces" Condition="IsMemberArray()">"MemberArray"</Item>
    <Item Name="Offset" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplOffset())</Item>
    <Item Name="Fullsize" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplFullSize())</Item>
    <Item Name="Base" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplBase())</Item>
  </Expand>
</Type>

<!-- TODO: (Psanche) BlockArray and PointerArray are not interface implementations ? WritableArrayInterface not handled ?-->
<Type Name="maxon::StaticArray&lt;maxon::Generic&gt;">
  <!-- Workaround, clang name starts with "maxon::" while msvc "class maxon::"-->
  <Intrinsic Name="IsBaseArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsPagedArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::PagedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::PagedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsSingleValueArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::SingleValueArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::SingleValueArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsSlicedArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::SlicedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::SlicedArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsMemberArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::MemberArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::MemberArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />
  <Intrinsic Name="IsBlockArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::BlockArrayImplBase,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::BlockArrayImplBase,&quot;, _object->_vtableCls->_nameLength) == 0" />
  
  <Intrinsic Name="GetBaseImplPtr" Expression="(void**)(((char*)_object) + 16)" />
  <Intrinsic Name="GetBaseImplPtrArray" Expression="($T1*)(*(char**)GetBaseImplPtr())" />
  <Intrinsic Name="GetBaseImplCount" Expression="*(Int*)(((char*)_object) + 24)" />
  
  <Intrinsic Name="GetPagedImplBase" Expression="(maxon::StaticArray&lt;maxon::Generic&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetPagedImplBaseCount" Expression="*(Int*)(((char*)_object) + 32)" />
  <Intrinsic Name="GetPagedImplPagePtr" Expression="(void**)(((char*)_object) + 56)" />
  <Intrinsic Name="GetPagedImplPageCount" Expression="*(Int*)(((char*)_object) + 64)" />
  <Intrinsic Name="GetPagedImplPageCapacity" Expression="*(Int*)(((char*)_object) + 72)" />
  <Intrinsic Name="GetPagedImplCount" Expression="*(Int*)(((char*)_object) + 80)" />
  <Intrinsic Name="GetPagedImplDefault" Expression="(void***)(((char*)_object) + 96)" />
  
  <Intrinsic Name="GetSingleImplCount" Expression="*(Int*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetSingleImplValue" Expression="(void**)(((char*)_object) + 56)" />

  <Intrinsic Name="GetSlicedImplBase" Expression="(maxon::StaticArray&lt;maxon::Generic&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetSlicedImplStart" Expression="*(Int*)(((char*)_object) + 32)" />
  <Intrinsic Name="GetSlicedImplEnd" Expression="*(Int*)(((char*)_object) + 40)" />
  <Intrinsic Name="GetSlicedImplCount" Expression="GetSlicedImplEnd() - GetSlicedImplStart()" />
  <Intrinsic Name="GetSlicedImplCycle" Expression="*(Bool*)(((char*)_object) + 48)" />
  <Intrinsic Name="GetSlicedImplDefault" Expression="(void**)(((char*)_object) + 56)" />

  <Intrinsic Name="GetMemberImplBase" Expression="(maxon::StaticArray&lt;maxon::Generic&gt;*)(((char*)_object) + 24)" />
  <Intrinsic Name="GetMemberImplOffset" Expression="*(Int*)(((char*)_object) + 48)" />
  <Intrinsic Name="GetMemberImplFullSize" Expression="*(Bool*)(((char*)_object) + 50)" />

  <DisplayString Condition="_object == 0">Empty</DisplayString>
  <DisplayString Condition="IsBaseArray()">Count={GetBaseImplCount()}</DisplayString>
  <DisplayString Condition="IsPagedArray()">Count={GetPagedImplCount()}</DisplayString>
  <DisplayString Condition="IsSingleValueArray()">Count={GetSingleImplCount()}</DisplayString>
  <DisplayString Condition="IsSlicedArray()">Count={GetSlicedImplCount()}</DisplayString>
  <DisplayString Condition="IsMemberArray()">Type=Generic Interfaces=MemberArray</DisplayString>
  <DisplayString>Type=Generic Interfaces=Unknown</DisplayString>
  <Expand>
    <Item Name="RefCnt" ExcludeView="countonly">(*((long*)(((char*)_object)-8))/16)</Item>

    <!-- Base array impl. Count item is only for showing when array is base for a MemberArrayImpl. -->
    <Item Name="Type" Condition="IsBaseArray()">"Generic"</Item>
    <Item Name="Interfaces" Condition="IsBaseArray()">"BaseArray"</Item>
    <Item Name="Count" Condition="IsBaseArray()">GetBaseImplCount()</Item>
    <Item Name="Pointer" Condition="IsBaseArray()" ExcludeView="countonly">GetBaseImplPtrArray()</Item>

    <!-- Paged array impl. -->
    <Item Name="Type" Condition="IsPagedArray()">"Generic"</Item>
    <Item Name="Interfaces" Condition="IsPagedArray()">"PagedArray"</Item>
    <Item Name="Count" Condition="IsPagedArray()">(GetPagedImplCount())</Item>
    <Item Name="Default" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplDefault())</Item>
    <Item Name="Page Count" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPageCount())</Item>
    <Item Name="Page Capacity" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPageCapacity())</Item>
    <Item Name="Page Pointer" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplPagePtr())</Item>
    <CustomListItems MaxItemsPerView="500" Condition="IsPagedArray()" ExcludeView="countonly">
      <Variable Name="i" InitialValue="0" />
      <Variable Name="pageData" InitialValue="(void*)(0)" />
      <Exec>i = 0</Exec>
      <Loop>
        <Break Condition="i >= GetPagedImplPageCount()" />
        <Exec>pageData = ( *(void**) ( ((char*)*GetPagedImplPagePtr()) + i * 16 ) )</Exec>
        <Item Name="[Page{i} RefCnt]">(*((long*)(((char*)pageData) - 8)) / 16)</Item>
        <Item Name="[Page{i} Count]">*((Int32*)(((char*)*GetPagedImplPagePtr()) + 8)), na</Item>
        <Item Name="[Page{i} Ptr]">(void*)((char*)pageData + 0), 1024</Item>
        <Exec>i++</Exec>
      </Loop>
    </CustomListItems>
    <Item Name="Base" Condition="IsPagedArray()" ExcludeView="countonly">(GetPagedImplBase())</Item>

    <!-- Single array impl. -->
    <Item Name="Type" Condition="IsSingleValueArray()">"Generic"</Item>
    <Item Name="Interfaces" Condition="IsSingleValueArray()">"SingleValueArray"</Item>
    <Item Name="Count" Condition="IsSingleValueArray()">GetSingleImplCount()</Item>
    <Item Name="Value" Condition="IsSingleValueArray()" ExcludeView="countonly">GetSingleImplValue()</Item>
    
    <!-- Sliced array impl. -->
    <Item Name="Type" Condition="IsSlicedArray()">"Generic"</Item>
    <Item Name="Interfaces" Condition="IsSlicedArray()">"SlicedArray"</Item>
    <Item Name="Count" Condition="IsSlicedArray()">GetSlicedImplEnd() - GetSlicedImplStart()</Item>
    <Item Name="Start" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplStart()</Item>
    <Item Name="End" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplEnd()</Item>
    <Item Name="Cycle" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplCycle()</Item>
    <Item Name="Default" Condition="IsSlicedArray()" ExcludeView="countonly">GetSlicedImplDefault()</Item>
    <Item Name="Base" Condition="IsSlicedArray()" ExcludeView="countonly">(GetSlicedImplBase())</Item>

    <!-- Member array impl. No way to show count nicely as displaystring unless duplicating get count natvis code for all types, use ExpandedItem here. -->
    <ExpandedItem Condition="IsMemberArray()">(*GetMemberImplBase()),view(countonly)</ExpandedItem>
    <Item Name="Type" Condition="IsMemberArray()">"Generic"</Item>
    <Item Name="Interfaces" Condition="IsMemberArray()">"MemberArray"</Item>
    <Item Name="Offset" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplOffset())</Item>
    <Item Name="Fullsize" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplFullSize())</Item>
    <Item Name="Base" Condition="IsMemberArray()" ExcludeView="countonly">(GetMemberImplBase())</Item>
  </Expand>
</Type>

<!-- DEACTIVATED BECAUSE often not working because StaticArray is not available. Redirect to StaticArray type, only methods differ. -->
<Type Name="maxon::ArrayXXX&lt;*&gt;">
  <DisplayString>{*(maxon::StaticArray&lt;$T1&gt;*)this}</DisplayString>
  <Expand>
    <ExpandedItem>(*(maxon::StaticArray&lt;$T1&gt;*)this)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::Array&lt;*&gt;">
  <Intrinsic Name="IsBaseArray" Expression="strncmp(_object->_vtableCls->_name, &quot;class maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0 || strncmp(_object->_vtableCls->_name, &quot;maxon::GenericBaseArrayImpl,&quot;, _object->_vtableCls->_nameLength) == 0" />

  <Intrinsic Name="GetBaseArrayCount" Expression="((maxon::BaseArray&lt;char,16,maxon::BASEARRAYFLAGS::NONE,maxon::DefaultAllocator&gt;*)((char*)this->_impl + 8))->_cnt" />
  <Intrinsic Name="GetBaseArrayPointer" Expression="((maxon::BaseArray&lt;char,16,maxon::BASEARRAYFLAGS::NONE,maxon::DefaultAllocator&gt;*)((char*)this->_impl + 8))->_ptr" />

  <DisplayString Condition="*(char**)this == 0">nullptr</DisplayString>
  <DisplayString Condition="*(char**)this != 0" Optional="true">{{ RefCnt: {(*((long*)(((char*)_object)-8))/16)}x {*_object->_classInfo->_base._class} }</DisplayString>
  <DisplayString Condition="*(char**)this != 0 &amp;&amp; IsBaseArray()">Count: {GetBaseArrayCount()} RefCnt: {(*((long*)(((char*)_object)-8))/16)}x Pointer: {_object}</DisplayString>
  <Expand>
    <Item Name="Count" Condition="*(char**)this != 0 &amp;&amp; IsBaseArray()">GetBaseArrayCount()</Item>
    <Item Name="Data" Condition="*(char**)this != 0 &amp;&amp; IsBaseArray()">($T1*)GetBaseArrayPointer(), [GetBaseArrayCount()]</Item>
  </Expand>
</Type>


<!-- Cast to helper type to allow debugging in nodes_corenodes module.. -->
<Type Name="maxon::Array&lt;maxon::NodePath&gt;">
  <DisplayString>{*(nodes.module.xdl64!maxon::NodePathStaticArrayNatVisHelper*)this}</DisplayString>
  <Expand>
    <ExpandedItem>(*(nodes.module.xdl64!maxon::NodePathStaticArrayNatVisHelper*)this)</ExpandedItem>
  </Expand>
</Type>

<Type Name="maxon::WeakRef&lt;*&gt;">
  <DisplayString>WeakRef-&gt; {*($T1*)(&amp;this->data->_target._value)}</DisplayString>
  <Expand>
    <ExpandedItem>(*($T1*)(&amp;this->data->_target._value))</ExpandedItem>
  </Expand>
</Type>

</AutoVisualizer>
