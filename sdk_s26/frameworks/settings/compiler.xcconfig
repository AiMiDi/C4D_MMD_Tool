//---Compiler Version
GCC_VERSION = com.apple.compilers.llvm.clang.1_0

CC=$(MAXON_ROOTDIR)/frameworks/settings/ccache-clang.sh
CXX=$(MAXON_ROOTDIR)/frameworks/settings/ccache-clang++.sh


//---Code Generation---
CLANG_X86_VECTOR_INSTRUCTIONS = avx
CLANG_ENABLE_CODE_COVERAGE = NO
GCC_GENERATE_DEBUGGING_SYMBOLS = YES
GCC_DYNAMIC_NO_PIC = NO								// YES: faster function calls for applications. Not appropriate for shared libraries (which need to be position-independent).
GCC_INLINES_ARE_PRIVATE_EXTERN = YES	
GCC_OPTIMIZATION_LEVEL = 0
GCC_FAST_MATH = NO
GCC_SYMBOLS_PRIVATE_EXTERN = YES	// YES: all symbols are declared 'private extern' unless explicitly marked to be exported using '__attribute__((visibility("default")))' in code
GCC_NO_COMMON_BLOCKS = YES
GCC_STRICT_ALIASING = NO

//---Language---
GCC_ENABLE_CPP_EXCEPTIONS = NO
GCC_ENABLE_CPP_RTTI = NO
GCC_ENABLE_OBJC_EXCEPTIONS = YES

CLANG_ENABLE_OBJC_ARC = YES

// OTHER_CPLUSPLUSFLAGS_BASE is defined here because it is also used in sanitizerbase.xcconfig
// Inheritance only works between levels, variable assignments perform on the same level will override the previous assignment.
// You cannot use $(inherited) in an xcconfig file to get the value assigned for a variable from an imported xcconfig file.
// To use that value you must use separate names and reference those variables in assignment.
// For x86_64 -ffp-contract=on is disabled  because it costs about 1 % of performance for non-AVX code.
OTHER_CPLUSPLUSFLAGS_BASE[arch=x86_64] = $(OTHER_CFLAGS) -fno-math-errno -faligned-allocation -Werror=shadow -Werror=unused-result -Werror=return-type -Werror=return-stack-address -Werror=reinterpret-base-class -Wno-c++1z-extensions -Wno-ordered-compare-function-pointers
OTHER_CPLUSPLUSFLAGS_BASE[arch=arm64] = $(OTHER_CFLAGS) -fno-math-errno -faligned-allocation -Werror=shadow -Werror=unused-result -Werror=return-type -Werror=return-stack-address -Werror=reinterpret-base-class -Wno-c++1z-extensions -Wno-ordered-compare-function-pointers
OTHER_CPLUSPLUSFLAGS = $(OTHER_CPLUSPLUSFLAGS_BASE)

CLANG_CXX_LANGUAGE_STANDARD = c++17
CLANG_CXX_LIBRARY = libc++
CLANG_ENABLE_OBJC_WEAK = YES;		// Compiles Objective-C code to enable weak references for code compiled with manual retain release (MRR) semantics

EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES = "$(inherited) maxon";
// CC=$(MAXON_ROOTDIR)/frameworks/settings/compile
// CXX=$(MAXON_ROOTDIR)/frameworks/settings/compile

SWIFT_VERSION = 5.0
